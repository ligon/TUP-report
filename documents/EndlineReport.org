:SETUP:
#+TITLE: Comparing Cash and Asset Transfers to Low-Income Households in South Sudan
#+AUTHOR: Reajul Chowdhury, Elliott Collins, Ethan Ligon, Munshi Sulaiman
#+DATE: \today
#+BIBLIOGRAPHY: main chicago
#+OPTIONS: texht:t toc:nil ':t inline:nil todo:nil
#+OPTIONS: title:nil  author:nil
#+LATEX_CLASS_OPTIONS: [12pt,letterpaper]
#+LATEX_HEADER: \usepackage{amsaddr}
#+LATEX_HEADER:       \newcommand{\Eq}[1]{(\ref{eq:#1})}
#+LaTeX_HEADER:       \usepackage[T1]{fontenc}
#+LATEX_HEADER_EXTRA: \newcommand{\Fig}[1]{Figure \ref{fig:#1}} \newcommand{\Tab}[1]{Table \ref{tab:#1}}
#+LATEX_HEADER_EXTRA: \usepackage{stringstrings} \renewcommand{\cite}[1]{\caselower[q]{#1}\citet{\thestring}}
#+LATEX_HEADER_EXTRA: \usepackage{lscape}
#+LATEX_HEADER_EXTRA: \usepackage{changepage}
#+LATEX_HEADER_EXTRA: \usepackage{fullpage}
#+LATEX_HEADER_EXTRA: \addbibresource{~/bibtex/main.bib}
#+PROPERTY: header-args:python :results output raw table :noweb no-export :exports none :prologue "# -*- coding: utf-8 -*-"
:END:

* Title Page                                                         :ignore:
#+BEGIN_export latex
\begin{titlepage}
\title[Cash vs. Asset Transfers]{Comparing Cash and Asset Transfers to Low-Income Households in South Sudan}

\date{\today}

\author{Reajul Chowdhury}
\address{University of Illinois, Champaign-Urbana}

\author{Elliott Collins}
\address{Innovations for Poverty Action}

\author{Ethan Ligon}
\address{University of California, Berkeley}

\author{Munshi Sulaiman}
\address{BRAC International}


\begin{abstract}
Studies have found that the ``graduation'' model
can be effective in alleviating the constraints that prevent extremely poor
households from increasing their productivity and income.  This consists
of a sizable transfer of productive physical capital coupled with
training and coaching over the course of one or two years.
Related, there is evidence that a simpler program of
unconditional cash transfers (UCT's) may also improve household
productivity and welfare.  Our field experiment provides a comparison of these two approaches to transferring wealth to
low-income households during the first two years of BRAC's ultra-poor pilot project
in South Sudan.  We consider the effect of each program on consumption,
income, asset holdings, and several intangible outcomes.  We find evidence that both types of
transfer have positive effects on consumption, but only in the
short-run.  We find a persistent increase in asset stocks, but only from
the graduation program.  We also consider the graduation program's effect on
households' responses to the outbreak of violence in 2014 civil war, and
elicit suggestive evidence that BRAC's support may have helped the
beneficiaries to cope with the short-term economic effects of the
violence.  We conclude that in this economic context, cash can increase
household consumption, but the goal of improving income or wealth is
aided by the additional services that the ultra-poor graduation model
offers.
\end{abstract}

%\thanks{JEL Classification: D11, D12, I32}
\renewcommand{\keywordsname}{Keywords}
\keywords{South Sudan, Unconditional cash transfers, Ultra-poor graduation model}

\maketitle
\thispagestyle{empty}
\end{titlepage}
#+END_export

* Introduction
 
What intervention(s) effectively alleviate poverty and can provide
sustainable livelihoods to the extreme poor?  This question remains
central in development economics.  The Ultra-Poor Graduation Model
(UPG) -- an approach of combining multifaceted support services to
address both immediate needs of the ultra-poor by giving them
consumption supports and their long-term need for a sustainable
livelihood by providing them a grant of productive assets coupled with
technical skills training---has been successful in reducing extreme
poverty in a wide range of contexts
citep:bandiera-etal17,banerjee-etal15.  In parallel, an alternative
poverty alleviation approach that has gained new interest in recent
years involves offering poor households direct, unconditional cash
transfers (UCT's) citep:haushofer-shapiro16,blattman-etal16.
Currently, evidence on these two (sometimes competing) frameworks
indicates that UCT are more cost-effective in the short-run, but that
the graduation model has more convincing evidence of the long-term
impacts citep:sulaiman18.  

Long-term follow-up studies of the UPG model show that the impacts not
only persist but also grow over 7 to 10 years in West Bengal
citep:banerjee-etal16,banerjee-etal20 and up to 14 years in Bangladesh
citep:balboni-etal20.  cite:haushofer-shapiro18 also find the
short-term (9 months after program start) positive impacts of UCT on
household assets and consumption sustained in their 3-year follow-up
survey, although their estimates depend on the choice of control
group citep:ozler18.  In their long-term follow-up survey,
cite:blattman-etal20 find that the impacts of cash transfers
dissipated in Uganda after 9 years. While comparing results across
evaluations have various limitations, a few studies have emabarked on
comparing the two models in the same setting citep:sedlmayr-etal20 or
comparing asset versus in-kind transfers (e.g. cite:fafchamps-etal14).

While the UCT and the UPG models are both direct capital transfer
interventions, they are very different in their approaches. The UPG
model guides and constrains the use of capital towards productive
investment, while UCT's allow households to invest, save, and consume
as they see fit. The UPG includes a sequence of support packages that
include a grant of productive assets, business mentoring, life-skills
training, short-term consumption support, and access to savings. The
goal of the grant transfer is to help the poor start micro-enterprises
while other components are related to either protecting their
enterprises or increasing income from them. In contrast to the UPG
model, the UCT programs follow a straightforward rationale---putting
the development and social protection resources directly in the hands
of poor people and letting them use these resources as they see
best. The natural question that arises is whether (and how) these
additional features and constraints in the UPG framework change how
households use their capital transfers. This study provides an
experimental evaluation of the two approaches in the same setting in
South Sudan.

The results from our field experiment show that both types of transfer
positively impact consumption, but only in the short run (about 6
months after transfer). We see an increase in asset stocks in our
endline (12--18 months after transfer), but only from the UPG
treatment.  We also elicit suggestive evidence that UPG support may
have helped these beneficiaries cope with the short-term economic
effects of the outbreak of violence in 2014.  We conclude that in this
context, cash can increase household consumption, but the goal of
improving income or wealth was aided by the additional services that
the UPG model offers.  Our results contribute to the literature in a
two important ways.  First, this is one of the few experiments
attempting to directly compare these two approaches of transfer
programs in the same population.  Second, this evaluation is conducted
in a conflict-affected context where cash transfers are a common tool
in humanitarian programming despite limited evidence of their impacts.
With this introduction, Section [[sec:program]] describes the experiment
and the interventions. Section [[sec:data]] describes the data, Section [[sec:strategy]] our
empirical strategy, and results are discussed in Section [[sec:results]]. 

* The Program
  <<sec:program>>
The UPG model and the UCT program studied in this paper come from a
randomized field experiment that was implemented in collaboration with
BRAC South Sudan. The project was supported by the Global Poverty
Alleviation Fund and was implemented in the Yei town of Western
Equatoria region.

** Beneficiary Selection and Randomization

BRAC began their project implementation in April 2013 by conducting a
census of all households having at least one adult women within the
operational area of BRAC's office in Yei. The census interview
included questions to assess their eligibility to be beneficiaries; a
program goal was to enroll only "ultra-poor" households who were
unlikely to migrate.  Details of the eligibility criteria are given in
cite:morel-chowdhury15.

The census covered 1279 households, of which 755 were found to be
eligible.  We then conducted a baseline survey of these eligible
households, successfully interviewing 649.  Among those who were
interviewed at the baseline, 250 were randomly assigned to participate
in the UPG program, 125 were randomly assigned to a UCT group, and the
remaining 274 households were assigned to the control group.
Randomization was done stratifying on four binary household
characteristics (viz. below median number of income earners, below
median of assets owned, whether involved in agriculture and whether
has a business). The study was registered on RIDIE (study ID
#RIDIE-STUDY-ID-5450e3f81fbc6).



** The Ultra-Poor Graduation Program
   
The UPG program itself is similar to the other graduation programs
implemented by BRAC elsewhere in terms of the core components---see
cite:bandiera-etal17 for the model in Bangladesh and
cite:banerjee-etal15 for pilots in six-countries.  Based on its
assessment of the local markets, BRAC designed several possible
enterprises for the beneficiaries: goat husbandry, duck husbandry,
maize cultivation, vegetable cultivation, and trade in dried fish. The
preferences of enrolled households over these different enterprises
were elicited at baseline.  Trading of dried fish was the most popular
enterprise, with animal husbandry (goats then ducks) the second and
third choices.  Crop cultivation (whether of vegetables or maize) was
less popular.  Similar to other graduation initiatives, the number of
households to be given each kind of asset was set in advance, with 75
enrolled in agricultural activities (either maize or vegetable
cultivation), 85 in duck rearing, 45 in goat rearing, and the
remaining 40 in small trade involving dried fish.  Within these
limits, assignment to particular enterprises for each household was
made at the discretion of program staff after taking into account
participants' preferences and skills.

One eligible women from each household (the primary recipient)
attended two training sessions.  The first of these was for general
business skills, including literacy, numeracy, and financial
management. The next was sector-specific and focused on participants'
respective enterprises.  After these enterprise orientations were
completed, asset transfers began in late 2013 and continued through
the first few months of 2014.  The productive assets related to each
enterprise were valued at around $240 per household, with a random
subset receiving an additional $60 top-up in assets later in 2014.
Shortly after that, households started to attend weekly or semiweekly
meetings with other nearby participants to discuss the details of
their businesses with each other and a BRAC extension officer. In
these group meetings, the participants also received food transfers
for a while, which were designed to help get households to the point
of obtaining revenue from their assets without having to sell
them. The market value of these food transfers was valued at $110,
bringing the total value of all transfers to either $350 or $410.

** Unconditional Cash Transfers

Households assigned to this treatment arm received a cash transfer of
either $350 or $410, matching the values of assets received by
households in the UPG treatment. Local community leaders were
approached in advance of talking to individual households to reassure
recipients regarding BRAC's intentions.  It was made clear that the
transfers were there for their benefit, and that while they were
encouraged to put them towards some productive use, their use was
unrestricted, and that under no circumstances would they receive a
second transfer in the future.  BRAC was a well-established
institution in the greater Yei community, so these assurances were
taken as credible, and no one refused to accept the money.  Cash
transfers were delivered by field officers in person and in the local
currency (South Sudanese Pounds, or SSPs). The cash transfers in our
study differ from several other cash transfer evaluations. For
example, cite:haushofer-shapiro16 deposited funds in a bank or mobile
money account, while cite:fafchamps-etal14 used money transfers. Since
experimental studies of the behavioral implications of savings
accounts citep:dupas-robinson13 show that the disbursal method might
affect the propensity to save a cash transfer, the results of our
experiment may not be directly comparable to other evaluations of UCT.


* The Data
  <<sec:data>>
** Timeline                                                          :ignore:
We have four principal sources of data.  First, as discussed above, we
conducted a census of households with women in the area around BRAC's
offices in April of 2013.  Second, in the summer of 2013 we conducted
a baseline survey of eligible households.  We randomly assigned women
who responsed to this baseline survey to one of the UPG, UCT, or
control groups; some randomly selected UPG and UCT assignees were
further chosen to receive an asset/cash "top-up" valued at $60.
Third, we conducted a "midline" survey in June 2014, and an "endline"
survey in the summer of 2015.

Training and asset transfers for the UPG group began in late 2013; our
intention was to make transfers of cash to the UCT group at roughly
the same time that UPG participants were ready to begin their
operations, during the first quarter of 2014.  However, these plans
were complicated by an onset of broad civil unrest in South Sudan, and
disruption of BRAC's operations.

In response to the outbreak of violence in late 2013 and subsequent
closing of the offices in Yei, we conducted a midline survey in June
2014 to try to separate pre- and post-conflict changes in outcomes.
We cannot test any claims about the effect of the conflict on outcomes
for lack of a valid comparison group, though we do report estimates of
treatment effects on the severity or likelihood of having been
exposed to the conflict.  Some of the original asset
transfers were done before the office closure, which may affect
estimates of the difference between programs if rates of return
changed in the few intervening months.  Finally, we conducted an endline survey
in mid-2015 to estimate the effect of program participation
on households' financial situation and overall welfare. The key here
is that the survey conducted in mid-2014 provides us with /short-term/
treatment effects of the UPG program within 6--8 months of the asset
transfers, while providing a second baseline for the UCT treatment.
Likewise, the 2015 survey allows us to estimate treatment
effects one year after the cash transfers, and 15--18 months after the
asset transfers.

** Balance, Attrition, Selection

In Appendix [[Balance & Selection]] we examine in detail whether the
randomly assigned treatment groups are balanced on observables; the
attrition of households from the sample; and whether this attrition is
selective, varying systematically either with assignment or baseline
characteristics of the household.

The means of a long list of household characteristics are balanced
across groups, with minor exceptions attributable to chance (a larger
share of households in the UCT group owned motorcycles at baseline,
and the same group had made larger average purchases of textiles
during the past year; see Appendix Tables [[tab:balance_check]] and
[[tab:mean_log_balance]]).

Given the environment, attrition was quite low (see Appendix Table
[[tab:attrition_count]]).  We attempted to survey 755 eligible households
in total.  Of these, 649 were surveyed at baseline, 606 at midline,
and 700 at endline.  Thus, the probability of an eligible household
being interviewed in 2013 was 87%, falling to 81% in 2014, and rising
to 93% in 2015.  However, households in the control group were
significantly less likely to be interviewed at baseline (Appendix
Table [[tab:interview_probabilities]]).  In order to take advantage of the
households not included in the baseline, as well as to deal with any
issues with imperfect balance on observables, our specification below
follows cite:banerjee-etal15 by setting missing values to zero when
controlling for baseline levels of the dependent variable, and
including an indicator for whether the household was in the baseline,
in a sort of adjusted ANCOVA specification of the sort discussed by
cite:mckenzie12.

* Empirical Strategy
  <<sec:strategy>>
We estimate a single model using interactions between time effects and
group assignment, as well as baseline values of the outcome variable
where available; this is 
\begin{equation}
\label{eq:estimating}
Y_{it} =\alpha_{t}+\beta^t_{UCT}I_{t}*UCT_{i}+\beta^t_{UPG}I_{t}*UPG_{i}+\gamma Y_{i,2013}(1-M_{i,2013}) + \delta M_{i,2013} +\epsilon_{it},
\end{equation}
for $t\in\{2014,2015\}$, with $i$ indexing households.  The
$\alpha_{t}$ are time fixed effects; $I_{t}$ is an indicator if the
year is $t$; and $Y_{it}$ is an outcome of interest for household $i$ in
year $t$.  If baseline values of the dependent variable are missing
for household $i$ then this is indicated by the dummy variable
$M_{i,2013}$.  Thus, baseline values of the dependent variable appear
as $Y_{i,2013}$ where these are non-missing; but the coefficient
$\delta$ estimates the average baseline value conditional on it being
missing.

We take the interactions of UPG assignment with 2014 and 2015
indicators as the treatment effects at 6--8 and 15--17 months
respectively. The analogous interactions with the UCT group offer a
second baseline and a 12-month treatment effect, respectively.  Since
those transfers happened after the midline survey, its interaction
with $I_{2014}$ acts as a placebo; there is no /ex ante/ reason to
expect that households in the UCT group were different from the rest
of the control group at that point.  Given the slight difference in
timing, we report a \(t\)-test of the hypothesis
\(\beta^t_{UPG}=\beta^{2015}_{UCT}\) for both of \(t \in
\{2014,2015\}\).

Since the comparison between (UPG,2014) and (UCT,2015) allows for
something less than a year of exposure to the respective treatments we
regard \(\beta^{2014}_{UPG}=\beta^{2015}_{UCT}\) as the
most interesting hypothesis, but since these points of comparison
aren't contemporaneous we can't rule out the possibility that
aggregate shocks might have interacted somehow with the two programs
differently.  Accordingly, we also report
\(\beta^{2015}_{UPG}-\beta^{2015}_{UCT}\), which has the
interpretation as being the difference between the average effect of
having been enrolled in either program from its inception until 2015.

Because our various treatments are randomly assigned at the individual
level, there is no reason to "cluster" when computing the covariances
necessary for inference.  Instead, we flexibly allow for unspecified
forms of heterogeneity, using the `HC3' estimator proposed by
cite:mackinnon-white85 (note that this is generally regarded as the
most conservative of conventional heteroskedasticity consistent
estimators of the covariance matrix). 
 
* Results
  <<sec:results>>
** Assets

We consider the effects of different treatments on three broad classes
of assets.    The first is /physical/ assets, including livestock,
productive assets, and consumer durables.  The second are measures of
financial assets and transfers, including savings (both in currency
and in grain or other food stores) and transfers both into and out of
the household.  The third is agricultural land, either cultivated or
owned. 


*** Physical Asset Holdings
We first turn our attention to effects of the different programs on
the value of physical assets held.  Since UPG households were directly
/given/ a variety of different assets, for this program this can be
regarded as a rather direct test---eight months later, do UPG
recipients still own these assets, or have they sold (or eaten) them?

We aggregate physical assets into three distinct groups.  The first is
consumer "durables", which include things like televisions, bicycles, electric fans, and
household furnishings.  The second is 
"livestock", which includes cows, goats, poultry, and other small
animals.  Third is "production" assets, which includes not only
livestock but also other assets plausibly used by the household to
generate income, such as farm equipment, mobile phones, carts, sewing
equipment, sheds, and shop premises.  Finally we have "total" assets,
which includes the value of all of the above.

**** Recreating asset tables with and without treatment group fixed effects :ignore:
*************** NOTE
 Some assets were not included ('house', 'homestead', and 'netITN')
 either because numbers turned out to be more or less meaningless, or
 because they overlap (e.g. nets & ITN nets) (as commented in
 TUP-data/TUP.py). All of the Ns are the same because NaN values were
 considered as having a value of 0 for that asset (this occurs
 automatically when using .sum(axis=1) to sum values in different
 columns for a given row).

 Differences with previous code: 
 -This code does not do any censoring, truncating, or converting of
 values to US dollars or anything like that
*************** END


 #+name: asset_values
 #+begin_src python :noweb no-export :exports none  :results output table raw labels=[] :colnames no :tangle /tmp/asset_values.py
import ss_standard
import pandas as pd
import numpy as np
from cfe.df_utils import df_to_orgtbl

data_assignment  = "../../Report/documents/master_assignment.csv"
data_baseline = "../../TUP-data/data/Baseline/TUP_baseline.dta"
data_midline  = "../../TUP-data/Midline/TUP_midline.dta"
data_endline = "../../TUP-data/Endline/TUP_endline.dta"


df_b = pd.read_stata(data_baseline)
df_m = pd.read_stata(data_midline)
df_e = pd.read_stata(data_endline)
df_a = pd.read_csv(data_assignment)

df_b.set_index('idno', inplace=True)
df_m.set_index('idno', inplace=True)
df_e.set_index('idno', inplace=True)
df_a.set_index('RespID', inplace=True)

# merge baseline and midline based on idno index
df = pd.merge(df_b.filter(regex="^asset_"), 
              df_m.filter(regex="^asset_"), 
              how='outer', left_index=True, right_index=True)

# merge baseline/midline and endline based on idno index
df = pd.merge(df, 
              df_e.filter(regex="^asset_"), 
              how='outer', left_index=True, right_index=True)

# Some assets to ignore, either because numbers turned out to be more or less meaningless, 
# or because they overlap (e.g. nets & ITN nets) (as commented in TUP-data/TUP.py)

df = df.drop(columns = df.filter(like='house').columns)
df = df.drop(columns = df.filter(like='homestead').columns)
df = df.drop(columns = df.filter(like='netITN').columns)

# find columns that end with "_b", "_m", or "_e"
# cut off the last 2 "_b", "_m", or "_e"
asset = {}
asset[2013] = df.filter(regex="_b$").rename(columns=lambda x: x[:-2])
asset[2014] = df.filter(regex="_m$").rename(columns=lambda x: x[:-2])
asset[2015] = df.filter(regex="_e$").rename(columns=lambda x: x[:-2])

asset_n = {}
asset_val = {}
price = {}

# Note: value columns have format asset_val_{good}, quantity columns have format asset_n_{good}
for year in (2013, 2014, 2015):
    asset_n[year] = asset[year].filter(like='_n_').rename(columns=lambda col: col[8:])
    asset_val[year] = asset[year].filter(like='_val_').rename(columns=lambda col: col[10:]) 
    price[year] = asset_val[year]/asset_n[year]

# add top code here if needed

productive_2013 = ['plough', 'shed', 'shop', 'mobile', 'carts', 'sewing']
livestock_2013 = ['cows', 'smallanimals', 'poultry']
consdurables_2013 = [ 'radio', 'tv', 'fan', 'chairtables', 'bed', 'bicycle', 'net', 'motorcycle']


# not including 'ploughs again' variable
productive_2014_2015 = ['plough', 'shed', 'shop', 'pangas', 'axes', 'mobile', 'carts', 'sewing']
livestock_2014_2015 = ['cows', 'smallanimals', 'chickens', 'ducks']
consdurables_2014_2015 = ['radio', 'tv', 'fan', 'chairtables', 'bed', 'bicycle',
                          'net', 'charcoal', 'stoves', 'potspans', 'motorcycle']

# for 2013
asset_val[2013]['Year'] = '2013'
asset_val[2013]['Production'] = asset_val[2013][productive_2013].sum(axis=1)
asset_val[2013]['Livestock'] = asset_val[2013][livestock_2013].sum(axis=1)
asset_val[2013]['Durables'] = asset_val[2013][consdurables_2013].sum(axis=1)
    
for year in (2014, 2015):
    asset_val[year]['Year'] = str(year)
    # 2013 only has poultry, but 2014 and 2015 have chickens and ducks separately
    asset_val[year]['poultry'] = asset_val[year][ ['chickens', 'ducks'] ].sum(axis = 1)
    asset_n[year]['poultry'] = asset_n[year][ ['chickens', 'ducks'] ].sum(axis = 1)
    
    asset_val[year]['Production'] = asset_val[year][productive_2014_2015].sum(axis=1)
    asset_val[year]['Livestock'] = asset_val[year][livestock_2014_2015].sum(axis=1)
    asset_val[year]['Durables'] = asset_val[year][consdurables_2014_2015].sum(axis=1)    

outcomes = ["Total", "Production", "Livestock", "Durables"]

for year in (2013, 2014, 2015): 
    asset_val[year]['Total'] = asset_val[year][['Production','Livestock','Durables']].sum(axis=1)
    
    # set up to make year dummies
    asset_val[year]['2013'] = 0
    asset_val[year]['2014'] = 0
    asset_val[year]['2015'] = 0
    
    # baseline values as 'var'2013
    for var in outcomes: 
        asset_val[year][var+'2013'] = asset_val[2013][var]

# make year dummmies
asset_val[2013]['2013'].replace(to_replace = 0, value = 1, inplace=True)
asset_val[2014]['2014'].replace(to_replace = 0, value = 1, inplace=True)
asset_val[2015]['2015'].replace(to_replace = 0, value = 1, inplace=True)

# add in group dummies from master_assignment.csv
df2 = pd.concat((asset_val[2013], asset_val[2014], asset_val[2015]))
df = df2.join((df_a[ ['Group'] ].join(pd.get_dummies(df_a['Group']))))   
df = df.fillna(0)

Results = {}

Results['Values (SSP)'] = ss_standard.results(df,outcomes,positive=False,logs=False,return_stats=True)
Results['Positive'] = ss_standard.results(df,outcomes,positive=True,logs=False,return_stats=True)
Results['Log Values'] = ss_standard.results(df,outcomes,positive=False,logs=True,return_stats=True)

other = pd.DataFrame({k:r[2].stack() for k,r in Results.items()})
other.index.names = ['Variable','Outcome']
other.columns.name = 'Class'
other = other.stack().unstack('Variable').reorder_levels(['Class','Outcome']).sort_index()
other = other.reindex(['Values (SSP)','Positive','Log Values'],level=0)

print(df_to_orgtbl(other[['2014','2015']].unstack('Class'),float_fmt='%6.2f'))


print(ss_standard.table_stacked_by_class(Results,elide=True))

print(ss_standard.table_stacked_by_class(Results,elide=False))
 #+end_src

 #+results: asset_values

#+name: tab:asset_control
#+caption: Averages of physical assets owned by the control group in 2015, grouped into consumer durables, livestock, production assets, and total.  We measure (i) total value (in SSP) ; (ii) the proportion having positive values; and (iii) the log values, conditional on being positive.
 |            |         2014 |          |            |         2015 |          |            |
 | Outcome    | Values (SSP) | Positive | Log Values | Values (SSP) | Positive | Log Values |
 |------------+--------------+----------+------------+--------------+----------+------------|
 | Durables   |       666.99 |     0.70 |       6.30 |       786.13 |     0.90 |       6.28 |
 | Livestock  |       144.30 |     0.25 |       5.45 |       191.45 |     0.38 |       5.43 |
 | Production |       129.76 |     0.62 |       4.63 |       113.12 |     0.86 |       4.47 |
 | Total      |       941.05 |     0.70 |       6.64 |      1090.70 |     0.90 |       6.61 |

#+name: tab:asset_values
#+caption: Estimated treatment effects by group-year on on physical assets,  grouped into consumer durables, livestock, production assets, and total.  We measure (i) total value (in SSP); (ii) the proportion having positive values; and (iii) the log values, conditional on being positive.
 | Class        | Outcome    | $\beta_{UPG}^{2014}$ | $\beta_{UPG}^{2015}$ | $\beta_{UCT}^{2014}$ | $\beta_{UCT}^{2015}$ | $\beta_{UPG}^{2014} - \beta_{UCT}^{2015}$ | $\beta_{UPG}^{2015} - \beta_{UCT}^{2015}$ |
 |--------------+------------+----------------------+----------------------+----------------------+----------------------+-------------------------------------------+-------------------------------------------|
 | Values (SSP) | Durables   | \(151.62\)           | \( 97.31\)           | \( 53.10\)           | \(-144.28\)          | \(295.90\)^{**}                           | \(241.59\)                                |
 |              | $N=1500$   | (\( 92.10\))         | (\(102.83\))         | (\(104.33\))         | (\(111.03\))         | (\(144.26\))                              | (\(151.34\))                              |
 |              | Livestock  | \(378.03\)^{***}     | \(322.68\)^{***}     | \( 23.81\)           | \( 15.81\)           | \(362.22\)^{***}                          | \(306.87\)^{***}                          |
 |              | $N=1500$   | (\( 62.74\))         | (\( 55.57\))         | (\( 60.08\))         | (\( 52.31\))         | (\( 81.69\))                              | (\( 76.31\))                              |
 |              | Production | \( 72.40\)^{***}     | \( 18.40\)           | \( 64.43\)^{*}       | \(  1.93\)           | \( 70.47\)^{***}                          | \( 16.47\)                                |
 |              | $N=1500$   | (\( 22.66\))         | (\( 12.22\))         | (\( 33.31\))         | (\( 12.74\))         | (\( 26.00\))                              | (\( 17.65\))                              |
 |              | Total      | \(607.12\)^{***}     | \(443.46\)^{***}     | \(148.30\)           | \(-119.57\)          | \(726.69\)^{***}                          | \(563.03\)^{***}                          |
 |              | $N=1500$   | (\(137.08\))         | (\(139.61\))         | (\(155.40\))         | (\(137.90\))         | (\(194.44\))                              | (\(196.24\))                              |
 | Positive     | Durables   | \(  0.19\)^{***}     | \( -0.01\)           | \(  0.19\)^{***}     | \( -0.05\)           | \(  0.24\)^{***}                          | \(  0.05\)                                |
 |              | $N=1500$   | (\(  0.03\))         | (\(  0.03\))         | (\(  0.04\))         | (\(  0.04\))         | (\(  0.05\))                              | (\(  0.04\))                              |
 |              | Livestock  | \(  0.47\)^{***}     | \(  0.37\)^{***}     | \(  0.06\)           | \(  0.05\)           | \(  0.42\)^{***}                          | \(  0.32\)^{***}                          |
 |              | $N=1500$   | (\(  0.04\))         | (\(  0.04\))         | (\(  0.05\))         | (\(  0.05\))         | (\(  0.06\))                              | (\(  0.06\))                              |
 |              | Production | \(  0.21\)^{***}     | \( -0.01\)           | \(  0.13\)^{***}     | \( -0.03\)           | \(  0.24\)^{***}                          | \(  0.02\)                                |
 |              | $N=1500$   | (\(  0.03\))         | (\(  0.03\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.05\))                              | (\(  0.05\))                              |
 |              | Total      | \(  0.19\)^{***}     | \(  0.00\)           | \(  0.19\)^{***}     | \( -0.05\)           | \(  0.24\)^{***}                          | \(  0.05\)                                |
 |              | $N=1500$   | (\(  0.03\))         | (\(  0.02\))         | (\(  0.04\))         | (\(  0.03\))         | (\(  0.05\))                              | (\(  0.04\))                              |
 | Log Values   | Durables   | \(  0.01\)           | \(  0.03\)           | \( -0.08\)           | \( -0.18\)           | \(  0.19\)                                | \(  0.21\)                                |
 |              | $N=1274$   | (\(  0.10\))         | (\(  0.09\))         | (\(  0.12\))         | (\(  0.12\))         | (\(  0.15\))                              | (\(  0.15\))                              |
 |              | Livestock  | \(  0.58\)^{***}     | \(  0.51\)^{***}     | \( -0.16\)           | \(  0.12\)           | \(  0.46\)^{*}                            | \(  0.39\)                                |
 |              | $N=704$    | (\(  0.16\))         | (\(  0.14\))         | (\(  0.26\))         | (\(  0.19\))         | (\(  0.25\))                              | (\(  0.24\))                              |
 |              | Production | \(  0.26\)^{**}      | \(  0.12\)           | \(  0.19\)           | \(  0.14\)           | \(  0.11\)                                | \( -0.02\)                                |
 |              | $N=1176$   | (\(  0.12\))         | (\(  0.09\))         | (\(  0.16\))         | (\(  0.10\))         | (\(  0.15\))                              | (\(  0.13\))                              |
 |              | Total      | \(  0.41\)^{***}     | \(  0.33\)^{***}     | \( -0.06\)           | \( -0.05\)           | \(  0.47\)^{***}                          | \(  0.39\)^{***}                          |
 |              | $N=1281$   | (\(  0.09\))         | (\(  0.09\))         | (\(  0.12\))         | (\(  0.11\))         | (\(  0.14\))                              | (\(  0.14\))                              |


#+LATEX: \begin{landscape}
#+name: tab:asset_values_full
#+caption: Estimated treatment effects by group-year on on physical assets,  grouped into consumer durables, livestock, production assets, and total.  We measure (i) total value (in SSP); (ii) the proportion having positive values; and (iii) the log values, conditional on being positive.
 | Class        | Outcome    | $\beta_{UPG}^{2014}$ | $\beta_{UPG}^{2015}$ | $\beta_{UCT}^{2014}$ | $\beta_{UCT}^{2015}$ | 2014             | 2015             | Baseline value   | $\beta_{UPG}^{2014} - \beta_{UCT}^{2015}$ | $\beta_{UPG}^{2015} - \beta_{UCT}^{2015}$ |
 |--------------+------------+----------------------+----------------------+----------------------+----------------------+------------------+------------------+------------------+-------------------------------------------+-------------------------------------------|
 | Values (SSP) | Durables   | \(151.62\)           | \( 97.31\)           | \( 53.10\)           | \(-144.28\)          | \(609.47\)^{***} | \(728.60\)^{***} | \(  0.08\)^{***} | \(295.90\)^{**}                           | \(241.59\)                                |
 |              | $N=1500$   | (\( 92.10\))         | (\(102.83\))         | (\(104.33\))         | (\(111.03\))         | (\( 60.36\))     | (\( 60.23\))     | (\(  0.03\))     | (\(144.26\))                              | (\(151.34\))                              |
 |              | Livestock  | \(378.03\)^{***}     | \(322.68\)^{***}     | \( 23.81\)           | \( 15.81\)           | \(136.05\)^{***} | \(183.21\)^{***} | \(  0.02\)^{*}   | \(362.22\)^{***}                          | \(306.87\)^{***}                          |
 |              | $N=1500$   | (\( 62.74\))         | (\( 55.57\))         | (\( 60.08\))         | (\( 52.31\))         | (\( 27.70\))     | (\( 27.66\))     | (\(  0.01\))     | (\( 81.69\))                              | (\( 76.31\))                              |
 |              | Production | \( 72.40\)^{***}     | \( 18.40\)           | \( 64.43\)^{*}       | \(  1.93\)           | \(125.11\)^{***} | \(108.47\)^{***} | \(  0.03\)^{*}   | \( 70.47\)^{***}                          | \( 16.47\)                                |
 |              | $N=1500$   | (\( 22.66\))         | (\( 12.22\))         | (\( 33.31\))         | (\( 12.74\))         | (\( 13.04\))     | (\(  7.34\))     | (\(  0.02\))     | (\( 26.00\))                              | (\( 17.65\))                              |
 |              | Total      | \(607.12\)^{***}     | \(443.46\)^{***}     | \(148.30\)           | \(-119.57\)          | \(846.74\)^{***} | \(996.39\)^{***} | \(  0.07\)^{***} | \(726.69\)^{***}                          | \(563.03\)^{***}                          |
 |              | $N=1500$   | (\(137.08\))         | (\(139.61\))         | (\(155.40\))         | (\(137.90\))         | (\( 80.78\))     | (\( 77.33\))     | (\(  0.02\))     | (\(194.44\))                              | (\(196.24\))                              |
 | Positive     | Durables   | \(  0.19\)^{***}     | \( -0.01\)           | \(  0.19\)^{***}     | \( -0.05\)           | \(  0.66\)^{***} | \(  0.86\)^{***} | \(  0.06\)^{**}  | \(  0.24\)^{***}                          | \(  0.05\)                                |
 |              | $N=1500$   | (\(  0.03\))         | (\(  0.03\))         | (\(  0.04\))         | (\(  0.04\))         | (\(  0.03\))     | (\(  0.02\))     | (\(  0.02\))     | (\(  0.05\))                              | (\(  0.04\))                              |
 |              | Livestock  | \(  0.47\)^{***}     | \(  0.37\)^{***}     | \(  0.06\)           | \(  0.05\)           | \(  0.22\)^{***} | \(  0.35\)^{***} | \(  0.10\)^{***} | \(  0.42\)^{***}                          | \(  0.32\)^{***}                          |
 |              | $N=1500$   | (\(  0.04\))         | (\(  0.04\))         | (\(  0.05\))         | (\(  0.05\))         | (\(  0.02\))     | (\(  0.03\))     | (\(  0.03\))     | (\(  0.06\))                              | (\(  0.06\))                              |
 |              | Production | \(  0.21\)^{***}     | \( -0.01\)           | \(  0.13\)^{***}     | \( -0.03\)           | \(  0.59\)^{***} | \(  0.82\)^{***} | \(  0.06\)^{***} | \(  0.24\)^{***}                          | \(  0.02\)                                |
 |              | $N=1500$   | (\(  0.03\))         | (\(  0.03\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.03\))     | (\(  0.02\))     | (\(  0.02\))     | (\(  0.05\))                              | (\(  0.05\))                              |
 |              | Total      | \(  0.19\)^{***}     | \(  0.00\)           | \(  0.19\)^{***}     | \( -0.05\)           | \(  0.66\)^{***} | \(  0.85\)^{***} | \(  0.07\)^{***} | \(  0.24\)^{***}                          | \(  0.05\)                                |
 |              | $N=1500$   | (\(  0.03\))         | (\(  0.02\))         | (\(  0.04\))         | (\(  0.03\))         | (\(  0.03\))     | (\(  0.02\))     | (\(  0.02\))     | (\(  0.05\))                              | (\(  0.04\))                              |
 | Log Values   | Durables   | \(  0.01\)           | \(  0.03\)           | \( -0.08\)           | \( -0.18\)           | \(  6.12\)^{***} | \(  6.13\)^{***} | \(  0.04\)^{***} | \(  0.19\)                                | \(  0.21\)                                |
 |              | $N=1274$   | (\(  0.10\))         | (\(  0.09\))         | (\(  0.12\))         | (\(  0.12\))         | (\(  0.08\))     | (\(  0.07\))     | (\(  0.01\))     | (\(  0.15\))                              | (\(  0.15\))                              |
 |              | Livestock  | \(  0.58\)^{***}     | \(  0.51\)^{***}     | \( -0.16\)           | \(  0.12\)           | \(  5.36\)^{***} | \(  5.37\)^{***} | \(  0.03\)^{**}  | \(  0.46\)^{*}                            | \(  0.39\)                                |
 |              | $N=704$    | (\(  0.16\))         | (\(  0.14\))         | (\(  0.26\))         | (\(  0.19\))         | (\(  0.14\))     | (\(  0.12\))     | (\(  0.02\))     | (\(  0.25\))                              | (\(  0.24\))                              |
 |              | Production | \(  0.26\)^{**}      | \(  0.12\)           | \(  0.19\)           | \(  0.14\)           | \(  4.52\)^{***} | \(  4.38\)^{***} | \(  0.04\)^{***} | \(  0.11\)                                | \( -0.02\)                                |
 |              | $N=1176$   | (\(  0.12\))         | (\(  0.09\))         | (\(  0.16\))         | (\(  0.10\))         | (\(  0.09\))     | (\(  0.06\))     | (\(  0.01\))     | (\(  0.15\))                              | (\(  0.13\))                              |
 |              | Total      | \(  0.41\)^{***}     | \(  0.33\)^{***}     | \( -0.06\)           | \( -0.05\)           | \(  6.47\)^{***} | \(  6.46\)^{***} | \(  0.03\)^{***} | \(  0.47\)^{***}                          | \(  0.39\)^{***}                          |
 |              | $N=1281$   | (\(  0.09\))         | (\(  0.09\))         | (\(  0.12\))         | (\(  0.11\))         | (\(  0.08\))     | (\(  0.07\))     | (\(  0.01\))     | (\(  0.14\))                              | (\(  0.14\))                              |
#+LATEX: \end{landscape}


**** Discussion                                                      :ignore:

The cash (UCT) group did not have a significant increase in the value
of assets measured in either 2014 or 2015.  This contrasts sharply
with the UPG group.  The UPG group gains significantly more asset
wealth than the cash or control groups in both 2014 and 2015, 18
months after receipt of transfers. The total value of assets held by
the UPG group is roughly three-quarters more than the control group in
2014 (midline), and roughly 45% more at endline.  As one might expect
given the design of the program, these differences are due principally
to differences in livestock holdings, with values of 378 and 322 SSP
more than average for households in the control group in 2014 and
2015, respectively.  

 The final two columns of Table [[tab:asset_values]] considers the difference
 in the average treatment effect between the UCT and UPG treatments.
 Here one needs to be thoughtful about the period of comparison, since
 the UCT treatment was rolled out later than the UPG.  Thus, the first
 row compares the difference in average asset holdings between the UPG
 and UCT groups roughly one year after the program began; here we see
 significantly higher mean UPG asset holdings, in the amount of 726
 SSP.  The second row instead compares contemporaneous endline asset
 holdings; here we again see significantly higher holdings for the UPG
 group. 


*** Savings & Land
**** Discussion of savings accounts                                  :ignore:
The UPG households were strongly encouraged to pay into a savings
account maintained by BRAC at each of their weekly meetings.
Regardless of their motivation, UPG households held savings accounts
at significantly higher rates than both the control and UCT groups
(Table [[tab:savings_values]]); roughly 29% more in 2014, and 18% more
in 2015.  The same is /not/ true of amounts of savings; conditional on
having positive savings, UPG groups held roughly 30% /less/ than the
control group in 2014.  This pattern then
changes dramatically in 2015, when both the UPG and UCT groups
dramatically increase their cash savings relative to the control, with
both groups holding over 50% more than the control (again, conditional
on holding any savings at all).  It is, perhaps, not surprising that
the UCT group held large savings in 2015---after all, giving these
households cash was the point of the treatment, implemented not long
before.  Understanding the increase in cash savings for the UPG group
is more challenging; are their business investments yielding returns
which allow them to save?  There may be some of this, but interpreting
the increase for the UPG groups must also take into account that the
number of UPG households holding positive savings fell from 2014 to
2015 relative to other groups, for which the prevalence of positive
savings increased from one third in 2014 to 39% in 2015.

**** Discussion of food saved                                        :ignore:

It is common in this community (and most in the region) to store non-perishable food
like maize, cassava, or millet as a form of savings.  This makes
particular sense in a high-inflation context, where the price of grain had doubled in the
previous year.  More households report saving in food (73%) as in cash
(40%).  The prevalence of food savings increased in significantly in 2014 for both UPG
and UCT groups relative to the control.[fn:: Note that food savings was not
measured at baseline, so these controls are omitted.]  However (Table
[[tab:savings_values]]) the /amount/ of food savings conditional on it being
positive was only significant for the UPG group, for whom it increased
by roughly 30% in 2014, one round after treatment; similarly, after
treatment the UCT group saved roughly 20% more in food than either the
control or UPG groups in 2015. 

**** Discussion of transfers                                         :ignore:

Households in the UPG group were roughly 7--8% more likely to both
give and receive transfers from other households in 2014.  The UCT
group showed a similar propensity to /receive/ transfers in 2014, but
did not give significantly more than the control group.  On the other
hand, one cannot reject the hypothesis that the propensity to both
give and receive was equal across both the UPG & UCT groups in 2014.
And for both groups the propensity to make transfers was no different
from that of the control group in 2015.  It's worth noting, however,
that transfers and indeed /all/ the forms of financial activity we
record in Table [[tab:savings_values]] showed marked increases across all
groups in both 2014 and 2015, relative to 2013.

**** Recreating savings tables                                       :ignore:
**************** NOTE
 CTL mean lists the mean and standard deviation of the control group 
 in 2015. All of the Ns are the same because NaN values were
 considered as having a value of 0 for that asset (this occurs
 automatically when using .sum(axis=1) to sum values in different
 columns for a given row). The baseline survey did not ask for food
 savings, which is why Baseline2013 and BaselineNA controls are omitted.

 Differences with previous code: 
 -This code does not do any censoring, truncating, or converting of
 values to US dollars
 -s8b_2c_m and  s8b_2d_m for other food savings values are included in
 this code but not the previous
 -in previous code, there was an issue at endline  with how the sum was
 being calculated for 'savings_otherfood_val_e' e.g. 40+NaN=NaN, so
 this new code uses s4b_oth_1b_e and s4b_oth_2b_e instead
 -this code includes columns for 'get transfer' and 'give transfer'
 that were not included in the previous table


*************** END


 #+name: savings_tables
 #+begin_src python :noweb no-export :exports none  :results output table raw labels=[] :colnames no :tangle /tmp/foo.py
import statsmodels.api as sm
import pandas as pd
import numpy as np
from cfe.df_utils import df_to_orgtbl
import ss_standard

data_assignment = "../../Report/documents/master_assignment.csv"
data_baseline = "../../TUP-data/data/Baseline/TUP_baseline.dta"
data_midline = "../../TUP-data/Midline/TUP_midline.dta"
data_endline = "../../TUP-data/Endline/TUP_endline.dta"

df_b = pd.read_stata(data_baseline)
df_m = pd.read_stata(data_midline)
df_e = pd.read_stata(data_endline)
df_a = pd.read_csv(data_assignment)

df_b.set_index('idno', inplace=True)
df_m.set_index('idno', inplace=True)
df_e.set_index('idno', inplace=True)
df_a.set_index('RespID', inplace=True)

#format savings_maize_q_m  savings_maize_val_m 
#s8b_2c_m and  s8b_2d_m are for other food savings values
#transfers_get1_m is value of transfers
df = pd.merge(df_b[ ['savings_home_b', 'savings_bank_b', 'savings_BRAC_b', 'savings_NGOs_b', 
                     'savings_other_b', 'land_owncult_b', 'land_rentcult_b', 'land_communitycult_b',
                     'land_ownnocult_b', 'land_ownrent_b', 'transfers_get1_b', 'transfers_get2_b', 
                     'transfers_get3_b', 'transfers_give1_b', 'transfers_give2_b', 'transfers_give3_b'] ], 
              df_m[ ['savings_home_m', 'savings_bank_m', 'savings_BRAC_m', 'savings_NGOs_m', 
                     'savings_other_m', 'savings_maize_val_m', 'savings_sorghum_val_m', 
                     's8b_2c_m', 's8b_2d_m', 'land_owncult_m', 'land_rentcult_m', 'land_communitycult_m',
                     'land_ownnocult_m', 'land_ownrent_m', 'transfers_get1_m', 'transfers_get2_m', 
                     'transfers_get3_m', 'transfers_give1_m', 'transfers_give2_m', 'transfers_give3_m'] ], 
              how='outer', left_index=True, right_index=True)


# # merge baseline/midline and endline based on idno index
# endline issue with how sum being calculated for 'savings_otherfood_val_e' - 40+NaN=NaN, so using s4b_oth_1b_e and s4b_oth_2b_e instead
df = pd.merge(df, 
              df_e[ ['savings_home_e', 'savings_bank_e', 'savings_BRAC_e', 'savings_NGOs_e', 
                     'savings_other_e', 'savings_maize_val_e', 'savings_sorghum_val_e', 
                     's4b_oth_1b_e', 's4b_oth_2b_e', 'land_owncult_e', 'land_rentcult_e', 'land_communitycult_e',
                     'land_ownnocult_e', 'land_ownrent_e', 'transfers_get1_e', 'transfers_get2_e', 
                     'transfers_get3_e', 'transfers_give1_e', 'transfers_give2_e', 'transfers_give3_e'] ], 
              how='outer', left_index=True, right_index=True)


df.rename({'s8b_2c_m': 'savings_otherfood1_val_m',
           's8b_2d_m': 'savings_otherfood2_val_m',
           's4b_oth_1b_e': 'savings_otherfood1_val_e',
           's4b_oth_2b_e': 'savings_otherfood2_val_e'}, axis=1, inplace=True)

# find columns that end with "_b", "_m", or "_e"
# cut off the the last 2 characters "_b", "_m", or "_e"
s2013 = df.filter(regex="_b$").rename(columns=lambda x: x[:-2])
s2014 = df.filter(regex="_m$").rename(columns=lambda x: x[:-2])
s2015 = df.filter(regex="_e$").rename(columns=lambda x: x[:-2])

s2013['Year'] = '2013'
s2014['Year'] = '2014'
s2015['Year'] = '2015'

outcomes_with_baseline = ['Savings', 'LandCult', 'LandOwn', 'Get Transfer', 'Give Transfer'] #excludes Food Savings

# make the sum variables
for var in (s2013, s2014, s2015):
    var["Savings"] = var[ ['savings_home', 'savings_bank', 'savings_BRAC', 'savings_NGOs', 'savings_other'] ].sum(axis=1)
    
    # no food savings at baseline (2013)
    if (var['Year'] != '2013').any(): 
        var["Food Savings"] = var[ ['savings_maize_val', 'savings_sorghum_val', 'savings_otherfood1_val', 'savings_otherfood2_val'] ].sum(axis=1)
    
    var["LandCult"] = var[ ['land_owncult', 'land_rentcult', 'land_communitycult'] ].sum(axis=1)
    var["LandOwn"] = var[ ['land_owncult', 'land_ownnocult', 'land_ownrent'] ].sum(axis=1)
    var["Get Transfer"] = var[ ['transfers_get1', 'transfers_get2', 'transfers_get3'] ].sum(axis=1)
    var["Give Transfer"] = var[ ['transfers_give1', 'transfers_give2', 'transfers_give3'] ].sum(axis=1)
    
    # set up to make year dummies
    var.insert(len(var.columns), '2013', 0)
    var.insert(len(var.columns), '2014', 0)
    var.insert(len(var.columns), '2015', 0)
    
    # baseline values as 'var'2013
    for outcome in outcomes_with_baseline: 
        var[outcome+'2013'] = s2013[outcome]
    
# make year dummmies
s2013['2013'].replace(to_replace = 0, value = 1, inplace=True)
s2014['2014'].replace(to_replace = 0, value = 1, inplace=True)
s2015['2015'].replace(to_replace = 0, value = 1, inplace=True)

df2 = pd.concat((s2013, s2014, s2015))
# add group dummies from master_assignment.csv
df = df2.join((df_a[ ['Group'] ].join(pd.get_dummies(df_a['Group']))))

outcomes = ['Savings', 'Food Savings', 'Get Transfer', 'Give Transfer']
Results = {}

Results['Values (SSP)'] = ss_standard.results(df,outcomes,positive=False,logs=False,return_stats=True)
Results['Positive'] = ss_standard.results(df,outcomes,positive=True,logs=False,return_stats=True)
Results['Log Values'] = ss_standard.results(df,outcomes,positive=False,logs=True,return_stats=True)

other = pd.DataFrame({k:r[2].stack() for k,r in Results.items()})
other.index.names = ['Variable','Outcome']
other.columns.name = 'Class'
other = other.stack().unstack('Variable').reorder_levels(['Class','Outcome']).sort_index()
other = other.reindex(['Values (SSP)','Positive','Log Values'],level=0)

print(df_to_orgtbl(other[['2014','2015']].unstack('Class'),float_fmt='%6.2f'))


print(ss_standard.table_stacked_by_class(Results,elide=True))

print(ss_standard.table_stacked_by_class(Results,elide=False))

 #+end_src

 #+results: savings_tables

#+name: tab:savings_control
 |               |         2014 |          |            |         2015 |          |            |
 | Outcome       | Values (SSP) | Positive | Log Values | Values (SSP) | Positive | Log Values |
 |---------------+--------------+----------+------------+--------------+----------+------------|
 | Food Savings  |        44.77 |     0.64 |       3.63 |        85.13 |     0.73 |       4.22 |
 | Get Transfer  |        23.19 |     0.14 |       4.45 |        45.84 |     0.17 |       5.08 |
 | Give Transfer |        18.62 |     0.10 |       3.54 |        11.82 |     0.08 |       4.56 |
 | Savings       |        50.51 |     0.34 |       4.05 |        78.70 |     0.39 |       4.61 |

#+name: tab:savings_values
 | Class        | Outcome       | $\beta_{UCT}^{2014}$ | $\beta_{UCT}^{2015}$ | $\beta_{UPG}^{2014}$ | $\beta_{UPG}^{2015}$ | $\beta_{UPG}^{2014} - \beta_{UCT}^{2015}$ | $\beta_{UPG}^{2015} - \beta_{UCT}^{2015}$ |
 |--------------+---------------+----------------------+----------------------+----------------------+----------------------+-------------------------------------------+-------------------------------------------|
 | Values (SSP) | Food Savings  | \( 12.33\)           | \( -4.72\)           | \( 42.53\)^{**}      | \( -1.42\)           | \( 47.25\)^{**}                           | \(  3.29\)                                |
 |              | $N=1500$      | (\( 13.75\))         | (\( 12.92\))         | (\( 18.97\))         | (\( 12.45\))         | (\( 22.95\))                              | (\( 17.94\))                              |
 |              | Get Transfer  | \( 18.58\)           | \(  7.62\)           | \( 42.00\)           | \(  0.83\)           | \( 34.39\)                                | \( -6.79\)                                |
 |              | $N=1500$      | (\( 14.67\))         | (\( 19.72\))         | (\( 36.32\))         | (\( 15.26\))         | (\( 41.33\))                              | (\( 24.94\))                              |
 |              | Give Transfer | \(-13.87\)           | \(  3.53\)           | \(  2.75\)           | \( -1.18\)           | \( -0.78\)                                | \( -4.71\)                                |
 |              | $N=1500$      | (\( 14.34\))         | (\( 10.47\))         | (\( 15.20\))         | (\(  4.19\))         | (\( 18.46\))                              | (\( 11.28\))                              |
 |              | Savings       | \( 32.46\)           | \( 32.31\)           | \( 16.64\)           | \( 99.28\)^{***}     | \(-15.67\)                                | \( 66.97\)                                |
 |              | $N=1500$      | (\( 33.50\))         | (\( 22.98\))         | (\( 15.03\))         | (\( 34.60\))         | (\( 27.46\))                              | (\( 41.54\))                              |
 | Positive     | Food Savings  | \(  0.20\)^{***}     | \( -0.04\)           | \(  0.13\)^{***}     | \(  0.00\)           | \(  0.17\)^{***}                          | \(  0.04\)                                |
 |              | $N=1500$      | (\(  0.04\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.04\))         | (\(  0.06\))                              | (\(  0.06\))                              |
 |              | Get Transfer  | \(  0.08\)^{*}       | \( -0.03\)           | \(  0.08\)^{**}      | \( -0.01\)           | \(  0.11\)^{**}                           | \(  0.02\)                                |
 |              | $N=1500$      | (\(  0.04\))         | (\(  0.04\))         | (\(  0.03\))         | (\(  0.03\))         | (\(  0.05\))                              | (\(  0.05\))                              |
 |              | Give Transfer | \(  0.03\)           | \( -0.01\)           | \(  0.07\)^{**}      | \(  0.03\)           | \(  0.08\)^{**}                           | \(  0.04\)                                |
 |              | $N=1500$      | (\(  0.03\))         | (\(  0.03\))         | (\(  0.03\))         | (\(  0.02\))         | (\(  0.04\))                              | (\(  0.04\))                              |
 |              | Savings       | \(  0.03\)           | \(  0.00\)           | \(  0.29\)^{***}     | \(  0.18\)^{***}     | \(  0.28\)^{***}                          | \(  0.18\)^{***}                          |
 |              | $N=1500$      | (\(  0.05\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.04\))         | (\(  0.06\))                              | (\(  0.07\))                              |
 | Log Values   | Food Savings  | \( -0.05\)           | \(  0.20\)^{*}       | \(  0.30\)^{***}     | \(  0.06\)           | \(  0.10\)                                | \( -0.14\)                                |
 |              | $N=1073$      | (\(  0.11\))         | (\(  0.10\))         | (\(  0.10\))         | (\(  0.09\))         | (\(  0.15\))                              | (\(  0.14\))                              |
 |              | Get Transfer  | \(  0.30\)           | \(  0.47\)^{*}       | \(  0.09\)           | \(  0.14\)           | \( -0.38\)                                | \( -0.34\)                                |
 |              | $N=255$       | (\(  0.28\))         | (\(  0.25\))         | (\(  0.26\))         | (\(  0.19\))         | (\(  0.36\))                              | (\(  0.31\))                              |
 |              | Give Transfer | \( -0.57\)           | \( -0.01\)           | \(  0.49\)           | \( -0.31\)           | \(  0.50\)                                | \( -0.30\)                                |
 |              | $N=159$       | (\(  0.38\))         | (\(  0.46\))         | (\(  0.31\))         | (\(  0.25\))         | (\(  0.55\))                              | (\(  0.52\))                              |
 |              | Savings       | \(  0.14\)           | \(  0.47\)^{**}      | \( -0.33\)^{**}      | \(  0.55\)^{***}     | \( -0.80\)^{***}                          | \(  0.08\)                                |
 |              | $N=671$       | (\(  0.25\))         | (\(  0.20\))         | (\(  0.16\))         | (\(  0.13\))         | (\(  0.25\))                              | (\(  0.24\))                              |

#+name: tab:savings_values_full
#+latex: \begin{landscape}
 | Class        | Outcome       | 2014             | 2015             | Baseline value | $\beta_{UCT}^{2014}$ | $\beta_{UCT}^{2015}$ | $\beta_{UPG}^{2014}$ | $\beta_{UPG}^{2015}$ | $\beta_{UPG}^{2014} - \beta_{UCT}^{2015}$ | $\beta_{UPG}^{2015} - \beta_{UCT}^{2015}$ |
 |--------------+---------------+------------------+------------------+----------------+----------------------+----------------------+----------------------+----------------------+-------------------------------------------+-------------------------------------------|
 | Values (SSP) | Food Savings  | \( 44.77\)^{***} | \( 85.13\)^{***} | ---            | \( 12.33\)           | \( -4.72\)           | \( 42.53\)^{**}      | \( -1.42\)           | \( 47.25\)^{**}                           | \(  3.29\)                                |
 |              | $N=1500$      | (\(  8.47\))     | (\(  8.41\))     |                | (\( 13.75\))         | (\( 12.92\))         | (\( 18.97\))         | (\( 12.45\))         | (\( 22.95\))                              | (\( 17.94\))                              |
 |              | Get Transfer  | \( 22.63\)^{***} | \( 45.28\)^{***} | \(  0.01\)     | \( 18.58\)           | \(  7.62\)           | \( 42.00\)           | \(  0.83\)           | \( 34.39\)                                | \( -6.79\)                                |
 |              | $N=1500$      | (\(  4.92\))     | (\( 10.05\))     | (\(  0.02\))   | (\( 14.67\))         | (\( 19.72\))         | (\( 36.32\))         | (\( 15.26\))         | (\( 41.33\))                              | (\( 24.94\))                              |
 |              | Give Transfer | \( 18.11\)       | \( 11.31\)^{***} | \(  0.02\)     | \(-13.87\)           | \(  3.53\)           | \(  2.75\)           | \( -1.18\)           | \( -0.78\)                                | \( -4.71\)                                |
 |              | $N=1500$      | (\( 14.35\))     | (\(  3.40\))     | (\(  0.02\))   | (\( 14.34\))         | (\( 10.47\))         | (\( 15.20\))         | (\(  4.19\))         | (\( 18.46\))                              | (\( 11.28\))                              |
 |              | Savings       | \( 46.37\)^{***} | \( 74.56\)^{***} | \(  0.03\)     | \( 32.46\)           | \( 32.31\)           | \( 16.64\)           | \( 99.28\)^{***}     | \(-15.67\)                                | \( 66.97\)                                |
 |              | $N=1500$      | (\( 10.47\))     | (\( 11.93\))     | (\(  0.02\))   | (\( 33.50\))         | (\( 22.98\))         | (\( 15.03\))         | (\( 34.60\))         | (\( 27.46\))                              | (\( 41.54\))                              |
 | Positive     | Food Savings  | \(  0.64\)^{***} | \(  0.73\)^{***} | ---            | \(  0.20\)^{***}     | \( -0.04\)           | \(  0.13\)^{***}     | \(  0.00\)           | \(  0.17\)^{***}                          | \(  0.04\)                                |
 |              | $N=1500$      | (\(  0.02\))     | (\(  0.02\))     |                | (\(  0.04\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.04\))         | (\(  0.06\))                              | (\(  0.06\))                              |
 |              | Get Transfer  | \(  0.13\)^{***} | \(  0.16\)^{***} | \(  0.05\)^{*} | \(  0.08\)^{*}       | \( -0.03\)           | \(  0.08\)^{**}      | \( -0.01\)           | \(  0.11\)^{**}                           | \(  0.02\)                                |
 |              | $N=1500$      | (\(  0.02\))     | (\(  0.02\))     | (\(  0.03\))   | (\(  0.04\))         | (\(  0.04\))         | (\(  0.03\))         | (\(  0.03\))         | (\(  0.05\))                              | (\(  0.05\))                              |
 |              | Give Transfer | \(  0.09\)^{***} | \(  0.07\)^{***} | \(  0.04\)^{*} | \(  0.03\)           | \( -0.01\)           | \(  0.07\)^{**}      | \(  0.03\)           | \(  0.08\)^{**}                           | \(  0.04\)                                |
 |              | $N=1500$      | (\(  0.02\))     | (\(  0.01\))     | (\(  0.02\))   | (\(  0.03\))         | (\(  0.03\))         | (\(  0.03\))         | (\(  0.02\))         | (\(  0.04\))                              | (\(  0.04\))                              |
 |              | Savings       | \(  0.33\)^{***} | \(  0.38\)^{***} | \(  0.02\)     | \(  0.03\)           | \(  0.00\)           | \(  0.29\)^{***}     | \(  0.18\)^{***}     | \(  0.28\)^{***}                          | \(  0.18\)^{***}                          |
 |              | $N=1500$      | (\(  0.03\))     | (\(  0.03\))     | (\(  0.03\))   | (\(  0.05\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.04\))         | (\(  0.06\))                              | (\(  0.07\))                              |
 | Log Values   | Food Savings  | \(  3.63\)^{***} | \(  4.22\)^{***} | ---            | \( -0.05\)           | \(  0.20\)^{*}       | \(  0.30\)^{***}     | \(  0.06\)           | \(  0.10\)                                | \( -0.14\)                                |
 |              | $N=1073$      | (\(  0.06\))     | (\(  0.06\))     |                | (\(  0.11\))         | (\(  0.10\))         | (\(  0.10\))         | (\(  0.09\))         | (\(  0.15\))                              | (\(  0.14\))                              |
 |              | Get Transfer  | \(  4.43\)^{***} | \(  5.06\)^{***} | \(  0.02\)     | \(  0.30\)           | \(  0.47\)^{*}       | \(  0.09\)           | \(  0.14\)           | \( -0.38\)                                | \( -0.34\)                                |
 |              | $N=255$       | (\(  0.19\))     | (\(  0.12\))     | (\(  0.03\))   | (\(  0.28\))         | (\(  0.25\))         | (\(  0.26\))         | (\(  0.19\))         | (\(  0.36\))                              | (\(  0.31\))                              |
 |              | Give Transfer | \(  3.54\)^{***} | \(  4.54\)^{***} | \(  0.02\)     | \( -0.57\)           | \( -0.01\)           | \(  0.49\)           | \( -0.31\)           | \(  0.50\)                                | \( -0.30\)                                |
 |              | $N=159$       | (\(  0.23\))     | (\(  0.19\))     | (\(  0.05\))   | (\(  0.38\))         | (\(  0.46\))         | (\(  0.31\))         | (\(  0.25\))         | (\(  0.55\))                              | (\(  0.52\))                              |
 |              | Savings       | \(  3.98\)^{***} | \(  4.55\)^{***} | \(  0.02\)     | \(  0.14\)           | \(  0.47\)^{**}      | \( -0.33\)^{**}      | \(  0.55\)^{***}     | \( -0.80\)^{***}                          | \(  0.08\)                                |
 |              | $N=671$       | (\(  0.14\))     | (\(  0.11\))     | (\(  0.02\))   | (\(  0.25\))         | (\(  0.20\))         | (\(  0.16\))         | (\(  0.13\))         | (\(  0.25\))                              | (\(  0.24\))                              |
#+latex: \end{landscape}




**** Discussion of land ownership & cultivation                      :ignore:

We also examine land ownership and cultivation in each year.  In 2014 both the
UPG and UCT groups are significantly  more likely cultivate land, and
also to own it.  These differences from the control group disappear
by 2015.  But interestingly, the amount of land owned or cultivated
/conditional/ on having some land is not significantly different from
the control for either group in 2014, and land cultivated is
significantly /less/ than the control both groups in 2015 (the same
goes for land ownership, but not at the same level of significance.




 #+begin_src python :noweb no-export :exports none  :results output table raw labels=[] :colnames no :tangle /tmp/foo.py
import statsmodels.api as sm
import pandas as pd
import numpy as np
from cfe.df_utils import df_to_orgtbl
import ss_standard

data_assignment = "../../Report/documents/master_assignment.csv"
data_baseline = "../../TUP-data/data/Baseline/TUP_baseline.dta"
data_midline = "../../TUP-data/Midline/TUP_midline.dta"
data_endline = "../../TUP-data/Endline/TUP_endline.dta"

df_b = pd.read_stata(data_baseline)
df_m = pd.read_stata(data_midline)
df_e = pd.read_stata(data_endline)
df_a = pd.read_csv(data_assignment)

df_b.set_index('idno', inplace=True)
df_m.set_index('idno', inplace=True)
df_e.set_index('idno', inplace=True)
df_a.set_index('RespID', inplace=True)

#format savings_maize_q_m  savings_maize_val_m 
#s8b_2c_m and  s8b_2d_m are for other food savings values
#transfers_get1_m is value of transfers
df = pd.merge(df_b[ ['savings_home_b', 'savings_bank_b', 'savings_BRAC_b', 'savings_NGOs_b', 
                     'savings_other_b', 'land_owncult_b', 'land_rentcult_b', 'land_communitycult_b',
                     'land_ownnocult_b', 'land_ownrent_b', 'transfers_get1_b', 'transfers_get2_b', 
                     'transfers_get3_b', 'transfers_give1_b', 'transfers_give2_b', 'transfers_give3_b'] ], 
              df_m[ ['savings_home_m', 'savings_bank_m', 'savings_BRAC_m', 'savings_NGOs_m', 
                     'savings_other_m', 'savings_maize_val_m', 'savings_sorghum_val_m', 
                     's8b_2c_m', 's8b_2d_m', 'land_owncult_m', 'land_rentcult_m', 'land_communitycult_m',
                     'land_ownnocult_m', 'land_ownrent_m', 'transfers_get1_m', 'transfers_get2_m', 
                     'transfers_get3_m', 'transfers_give1_m', 'transfers_give2_m', 'transfers_give3_m'] ], 
              how='outer', left_index=True, right_index=True)


# # merge baseline/midline and endline based on idno index
# endline issue with how sum being calculated for 'savings_otherfood_val_e' - 40+NaN=NaN, so using s4b_oth_1b_e and s4b_oth_2b_e instead
df = pd.merge(df, 
              df_e[ ['savings_home_e', 'savings_bank_e', 'savings_BRAC_e', 'savings_NGOs_e', 
                     'savings_other_e', 'savings_maize_val_e', 'savings_sorghum_val_e', 
                     's4b_oth_1b_e', 's4b_oth_2b_e', 'land_owncult_e', 'land_rentcult_e', 'land_communitycult_e',
                     'land_ownnocult_e', 'land_ownrent_e', 'transfers_get1_e', 'transfers_get2_e', 
                     'transfers_get3_e', 'transfers_give1_e', 'transfers_give2_e', 'transfers_give3_e'] ], 
              how='outer', left_index=True, right_index=True)


df.rename({'s8b_2c_m': 'savings_otherfood1_val_m',
           's8b_2d_m': 'savings_otherfood2_val_m',
           's4b_oth_1b_e': 'savings_otherfood1_val_e',
           's4b_oth_2b_e': 'savings_otherfood2_val_e'}, axis=1, inplace=True)

# find columns that end with "_b", "_m", or "_e"
# cut off the the last 2 characters "_b", "_m", or "_e"
s2013 = df.filter(regex="_b$").rename(columns=lambda x: x[:-2])
s2014 = df.filter(regex="_m$").rename(columns=lambda x: x[:-2])
s2015 = df.filter(regex="_e$").rename(columns=lambda x: x[:-2])

s2013['Year'] = '2013'
s2014['Year'] = '2014'
s2015['Year'] = '2015'

outcomes_with_baseline = ['Land Cultivated', 'Land Owned']

# make the sum variables
for var in (s2013, s2014, s2015):
    
    var["Land Cultivated"] = var[ ['land_owncult', 'land_rentcult', 'land_communitycult'] ].sum(axis=1)
    var["Land Owned"] = var[ ['land_owncult', 'land_ownnocult', 'land_ownrent'] ].sum(axis=1)
    
    # set up to make year dummies
    var.insert(len(var.columns), '2013', 0)
    var.insert(len(var.columns), '2014', 0)
    var.insert(len(var.columns), '2015', 0)
    
    # baseline values as 'var'2013
    for outcome in outcomes_with_baseline: 
        var[outcome+'2013'] = s2013[outcome]
    
# make year dummmies
s2013['2013'].replace(to_replace = 0, value = 1, inplace=True)
s2014['2014'].replace(to_replace = 0, value = 1, inplace=True)
s2015['2015'].replace(to_replace = 0, value = 1, inplace=True)

df2 = pd.concat((s2013, s2014, s2015))
# add group dummies from master_assignment.csv
df = df2.join((df_a[ ['Group'] ].join(pd.get_dummies(df_a['Group']))))

outcomes = ['Land Cultivated','Land Owned']
Results = {}

Results['Values (SSP)'] = ss_standard.results(df,outcomes,positive=False,logs=False,return_stats=True)
Results['Positive'] = ss_standard.results(df,outcomes,positive=True,logs=False,return_stats=True)
Results['Log Values'] = ss_standard.results(df,outcomes,positive=False,logs=True,return_stats=True)

other = pd.DataFrame({k:r[2].stack() for k,r in Results.items()})
other.index.names = ['Variable','Outcome']
other.columns.name = 'Class'
other = other.stack().unstack('Variable').reorder_levels(['Class','Outcome']).sort_index()
other = other.reindex(['Values (SSP)','Positive','Log Values'],level=0)

print(df_to_orgtbl(other[['2014','2015']].unstack('Class'),float_fmt='%6.2f'))


print(ss_standard.table_stacked_by_class(Results,elide=True))

print(ss_standard.table_stacked_by_class(Results,elide=False))

 #+end_src

#+name: tab:land_control
 |                 |         2014 |          |            |         2015 |          |            |
 | Outcome         | Values (SSP) | Positive | Log Values | Values (SSP) | Positive | Log Values |
 |-----------------+--------------+----------+------------+--------------+----------+------------|
 | Land Cultivated |         9.90 |     0.60 |       0.24 |        59.90 |     0.72 |       0.95 |
 | Land Owned      |         9.06 |     0.60 |       0.30 |        53.51 |     0.81 |       0.85 |

#+name: tab:land_values
 | Class        | Outcome         | $\beta_{UCT}^{2014}$ | $\beta_{UCT}^{2015}$ | $\beta_{UPG}^{2014}$ | $\beta_{UPG}^{2015}$ | $\beta_{UPG}^{2014} - \beta_{UCT}^{2015}$ | $\beta_{UPG}^{2015} - \beta_{UCT}^{2015}$ |
 |--------------+-----------------+----------------------+----------------------+----------------------+----------------------+-------------------------------------------+-------------------------------------------|
 | Values (SSP) | Land Cultivated | \( 16.47\)           | \(-43.96\)^{**}      | \( -2.35\)           | \(-14.17\)           | \( 41.61\)^{*}                            | \( 29.79\)                                |
 |              | $N=1500$        | (\( 19.34\))         | (\( 19.34\))         | (\( 15.31\))         | (\( 15.31\))         | (\( 24.66\))                              | (\( 24.66\))                              |
 |              | Land Owned      | \( 18.03\)           | \(-42.24\)^{**}      | \(  2.60\)           | \(-16.18\)           | \( 44.84\)^{*}                            | \( 26.06\)                                |
 |              | $N=1500$        | (\( 19.32\))         | (\( 19.32\))         | (\( 15.29\))         | (\( 15.29\))         | (\( 24.64\))                              | (\( 24.64\))                              |
 | Positive     | Land Cultivated | \(  0.10\)^{**}      | \( -0.04\)           | \(  0.15\)^{***}     | \(  0.00\)           | \(  0.18\)^{***}                          | \(  0.04\)                                |
 |              | $N=1500$        | (\(  0.05\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.04\))         | (\(  0.06\))                              | (\(  0.06\))                              |
 |              | Land Owned      | \(  0.13\)^{***}     | \( -0.05\)           | \(  0.16\)^{***}     | \( -0.02\)           | \(  0.21\)^{***}                          | \(  0.03\)                                |
 |              | $N=1500$        | (\(  0.05\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.04\))         | (\(  0.06\))                              | (\(  0.06\))                              |
 | Log Values   | Land Cultivated | \(  0.24\)           | \( -0.44\)^{**}      | \(  0.04\)           | \( -0.27\)^{*}       | \(  0.48\)^{*}                            | \(  0.17\)                                |
 |              | $N=1042$        | (\(  0.20\))         | (\(  0.19\))         | (\(  0.16\))         | (\(  0.15\))         | (\(  0.25\))                              | (\(  0.25\))                              |
 |              | Land Owned      | \(  0.31\)           | \( -0.34\)^{*}       | \(  0.22\)           | \( -0.12\)           | \(  0.55\)^{**}                           | \(  0.22\)                                |
 |              | $N=1114$        | (\(  0.19\))         | (\(  0.18\))         | (\(  0.15\))         | (\(  0.14\))         | (\(  0.24\))                              | (\(  0.23\))                              |

#+name: tab:land_values_full
#+latex: \begin{landscape}
 | Class        | Outcome         | 2014             | 2015             | Baseline value   | $\beta_{UCT}^{2014}$ | $\beta_{UCT}^{2015}$ | $\beta_{UPG}^{2014}$ | $\beta_{UPG}^{2015}$ | $\beta_{UPG}^{2014} - \beta_{UCT}^{2015}$ | $\beta_{UPG}^{2015} - \beta_{UCT}^{2015}$ |
 |--------------+-----------------+------------------+------------------+------------------+----------------------+----------------------+----------------------+----------------------+-------------------------------------------+-------------------------------------------|
 | Values (SSP) | Land Cultivated | \(  8.88\)       | \( 58.87\)^{***} | \(  1.01\)       | \( 16.47\)           | \(-43.96\)^{**}      | \( -2.35\)           | \(-14.17\)           | \( 41.61\)^{*}                            | \( 29.79\)                                |
 |              | $N=1500$        | (\( 10.15\))     | (\( 10.15\))     | (\(  3.10\))     | (\( 19.34\))         | (\( 19.34\))         | (\( 15.31\))         | (\( 15.31\))         | (\( 24.66\))                              | (\( 24.66\))                              |
 |              | Land Owned      | \( 12.89\)       | \( 57.34\)^{***} | \( -2.60\)       | \( 18.03\)           | \(-42.24\)^{**}      | \(  2.60\)           | \(-16.18\)           | \( 44.84\)^{*}                            | \( 26.06\)                                |
 |              | $N=1500$        | (\( 10.36\))     | (\( 10.36\))     | (\(  2.55\))     | (\( 19.32\))         | (\( 19.32\))         | (\( 15.29\))         | (\( 15.29\))         | (\( 24.64\))                              | (\( 24.64\))                              |
 | Positive     | Land Cultivated | \(  0.55\)^{***} | \(  0.67\)^{***} | \(  0.08\)^{***} | \(  0.10\)^{**}      | \( -0.04\)           | \(  0.15\)^{***}     | \(  0.00\)           | \(  0.18\)^{***}                          | \(  0.04\)                                |
 |              | $N=1500$        | (\(  0.03\))     | (\(  0.03\))     | (\(  0.03\))     | (\(  0.05\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.04\))         | (\(  0.06\))                              | (\(  0.06\))                              |
 |              | Land Owned      | \(  0.55\)^{***} | \(  0.75\)^{***} | \(  0.09\)^{***} | \(  0.13\)^{***}     | \( -0.05\)           | \(  0.16\)^{***}     | \( -0.02\)           | \(  0.21\)^{***}                          | \(  0.03\)                                |
 |              | $N=1500$        | (\(  0.03\))     | (\(  0.03\))     | (\(  0.03\))     | (\(  0.05\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.04\))         | (\(  0.06\))                              | (\(  0.06\))                              |
 | Log Values   | Land Cultivated | \(  0.24\)^{**}  | \(  0.95\)^{***} | \(  0.02\)       | \(  0.24\)           | \( -0.44\)^{**}      | \(  0.04\)           | \( -0.27\)^{*}       | \(  0.48\)^{*}                            | \(  0.17\)                                |
 |              | $N=1042$        | (\(  0.11\))     | (\(  0.10\))     | (\(  0.08\))     | (\(  0.20\))         | (\(  0.19\))         | (\(  0.16\))         | (\(  0.15\))         | (\(  0.25\))                              | (\(  0.25\))                              |
 |              | Land Owned      | \(  0.31\)^{***} | \(  0.86\)^{***} | \( -0.02\)       | \(  0.31\)           | \( -0.34\)^{*}       | \(  0.22\)           | \( -0.12\)           | \(  0.55\)^{**}                           | \(  0.22\)                                |
 |              | $N=1114$        | (\(  0.11\))     | (\(  0.09\))     | (\(  0.06\))     | (\(  0.19\))         | (\(  0.18\))         | (\(  0.15\))         | (\(  0.14\))         | (\(  0.24\))                              | (\(  0.23\))                              |
#+latex: \end{landscape}

** Income
*** Discussion                                                       :ignore:
Income was reliably measured only in 2015, and so our estimates do not
control for baseline values or allow for estimation of treatment
effects in different years.  The control group in 2015 has a measured
income of roughly 4300 SSP per year, or roughly $540 US (assuming an
exchange rate of around 8).  We estimate positive impacts on total
income for both the UPG and UCT groups, but only the former of these is
statistically significant (Table [[tab:income]]).

We saw earlier that the UPG group was more likely to hold positive
amounts of livestock, consistent with the design of the program.
Table [[tab:income]] further reveals that the UPG group is also
significantly more likely to receive positive amounts of income from
livestock (even though the average difference in livestock income between the
UPG group and others is not significant).  Further, conditional on
having positive livestock, the UPG group obtains 0.53 
log points more income from that livestock than does the control
group, and 0.60 log points more than the UCT group.

*** Recreating income table                                          :ignore:
*************** NOTE
This table uses income data from the endline survey.

Differences with previous code: 
-This code does not do any type of censoring, truncating, or converting of the
original values to US dollars or anything like that
-This code sets the price to NaN if we cannot figure out the market
price for the crop/livestock type and unit that was harvested (7
observations for crops and 3 observations for livestock). The
reason we would not be able to find out the market price is if no one
in the sample provided a market price for that crop livestock/type and
specific unit
- The original table does not have standard errors under CTL mean

Next steps: 
-consider whether multiplying (reported months of work)*(avg monthly
income) (what is currently being used) is better than using reported
annual income

*************** END

#+name: income_table
#+begin_src python :noweb no-export :exports none  :results output table raw labels=[] :colnames no :tangle /tmp/income.py
import statsmodels.api as sm
import pandas as pd
import numpy as np
from cfe.df_utils import df_to_orgtbl
import ss_standard

data_assignment  = "../../Report/documents/master_assignment.csv"
data_nonfarm = "../../TUP-data/Endline/sections_8_17.csv"
data_farm = "../../TUP-data/Endline/Agriculture_cleaned.csv"

df_a = pd.read_csv(data_assignment)
df_n = pd.read_csv(data_nonfarm)
df_f = pd.read_csv(data_farm)

df_n.set_index('res_id', inplace=True)
df_f.set_index('res_id', inplace=True)
df_a.set_index('RespID', inplace=True)

# """Nonagricultural income"""

df_n = df_n.filter(regex='^s16')

# s16_ic is nonfarm months received for a certain source of income for i = 1, 2, 3, 4, 5
# s16_id is nonfarm average income in each month for a certain source of income for i = 1, 2, 3, 4, 5
# using calculation from reported months and avg monthly income instead of reported annual income

nonfarm_yearly = pd.DataFrame() 
for i in range(1,6):
    nonfarm_yearly['source' + str(i)] = df_n['s16_' + str(i) + 'c']*df_n['s16_' + str(i) + 'd']

nonfarm_yearly_sum = nonfarm_yearly.sum(axis=1).groupby('res_id').sum()
nonfarm_yearly_sum.name = 'nonfarm_yearly_sum'
nonfarm_yearly_sum = nonfarm_yearly_sum.fillna(0)
#nonfarm_yearly['nonfarm_yearly_sum'] = nonfarm_yearly.sum(axis=1)


# """Agricultural income"""

# HARVEST VARIABLE NAMES: harvest_type (crop), harvest_size, harvest_unit (qty and unit harvested)
# harvest_price (market price in SSP), harvest_price_unit (market price unit), harvest_sold (qty sold assuming same unit as harvest_unit)

# in case market price unit and harvested/sold unit don't match, 
# calculate median of reported market prices for that crop (type) and market price unit (harvest_price_unit)
unit_prices = df_f.groupby(["harvest_type", "harvest_price_unit"])["harvest_price"].median()

# the format of unit_prices is the first index is harvest_type, the second index is harvest_price_unit, and
# the value is the median of market price units for that crop in that unit

k = 0
d = 0

df_f.insert(len(df_f.columns), 'adjusted_harvest_price', np.nan)

# iterate through each row
for i in range(len(df_f)):
    
    # if neither unit is NaN
    if pd.notna(df_f.iloc[i]['harvest_unit']):
        if pd.notna(df_f.iloc[i]['harvest_price_unit']):
    
            # if units don't match
            if df_f.iloc[i]['harvest_unit'] != df_f.iloc[i]['harvest_price_unit']:
                d = d + 1
                # get the data frame for the particular type of crop
                find_type = unit_prices[unit_prices.index.get_level_values(0) == df_f.iloc[i]['harvest_type']]
        
                # check if there is no reported market price for that crop and unit, and if so, set adjusted harvest price to missing
                if find_type[find_type.index.get_level_values(1) == df_f.iloc[i]['harvest_unit']].empty: 
                    k = k + 1
                    df_f['adjusted_harvest_price'].iloc[i] = np.nan
    
                else: 
                    # set the adjusted harvest price to be the median price for that type and harvest unit
                    df_f['adjusted_harvest_price'].iloc[i] = find_type[find_type.index.get_level_values(1) == df_f.iloc[i]['harvest_unit']].values[0]
        
            # if units match
            else: df_f['adjusted_harvest_price'].iloc[i] = df_f.iloc[i]['harvest_price']

#d is the number of rows for which the harvest unit and market price unit don't match (193)
#k is the number of rows for which the harvest unit and crop do not have any market price reported (7)
#print("there are {} rows for which no one reported a market price for that crop and unit".format(k))

farm_yearly = pd.DataFrame() 
df_f["farm_income_yearly"] = df_f["harvest_size"]*df_f["adjusted_harvest_price"]

# there could be  multiple rows for the same household, so we group by respondent ID
farm_yearly['farm_income_yearly_sum'] = df_f[ ['farm_income_yearly'] ].dropna().groupby("res_id")["farm_income_yearly"].sum()


# LIVESTOCK VARIABLE NAMES: livestock_type (animal), livestock_size, livestock_unit (qty and unit produced)
# livestock_price (market price in SSP), livestock_price_unit (market price unit), livestock_sold (qty sold assuming same unit as livestock_unit)

# in case market price unit and produced/sold unit don't match, 
# calculate median of reported market prices for that animal (type) and market price unit (livestock_price_unit)
unit_prices = df_f.groupby(["livestock_type", "livestock_price_unit"])["livestock_price"].median()
# the format of unit_prices is the first index is livestock_type, the second index is livestock_price_unit, and
# the value is the median of market price units for that animal in that unit

k = 0
d = 0

df_f.insert(len(df_f.columns), 'adjusted_livestock_price', np.nan)

# iterate through each row
for i in range(len(df_f)):
    
    # if neither unit is NaN
    if pd.notna(df_f.iloc[i]['livestock_unit']):
        if pd.notna(df_f.iloc[i]['livestock_price_unit']):
    
            # if units don't match
            if df_f.iloc[i]['livestock_unit'] != df_f.iloc[i]['livestock_price_unit']:
                d = d + 1
                # get the data frame for the particular type of animal
                find_type = unit_prices[unit_prices.index.get_level_values(0) == df_f.iloc[i]['livestock_type']]
        
                # check if there is no reported market price for that animal and unit, and if so, set adjusted harvest price to missing
                if find_type[find_type.index.get_level_values(1) == df_f.iloc[i]['livestock_unit']].empty: 
                    k = k + 1
                    df_f['adjusted_livestock_price'].iloc[i] = np.nan
                else: 
                    # set the adjusted livestock price to be the median price for that type and livestock unit
                    df_f['adjusted_livestock_price'].iloc[i] = find_type[find_type.index.get_level_values(1) == df_f.iloc[i]['livestock_unit']].values[0]
        
            # if units match
            else: df_f['adjusted_livestock_price'].iloc[i] = df_f.iloc[i]['livestock_price']

#d is the number of rows for which the livestock unit and market price unit don't match (9)
#k is the number of rows for which the livestock unit and crop do not have any market price reported (3)
# print("there are {} rows for which no one reported a market price for that animal and unit".format(k))
 
df_f["livestock_income_yearly"] = df_f["livestock_size"]*df_f["adjusted_livestock_price"]
df_f["livestock_income_yearly"] = df_f["livestock_income_yearly"].fillna(0) 

# there could be  multiple rows for the same household, so we group by respondent ID
farm_yearly['livestock_income_yearly_sum'] = df_f[ ['livestock_income_yearly'] ].dropna().groupby("res_id")["livestock_income_yearly"].sum()
farm_yearly['livestock_income_yearly_sum'] = farm_yearly['livestock_income_yearly_sum'].fillna(0)

df = pd.merge(nonfarm_yearly_sum, farm_yearly, how='outer', left_index=True, right_index=True)
df = pd.merge(df, df_a[ ['Group'] ].join(pd.get_dummies(df_a['Group'])), how='inner', left_index=True, right_index=True)

df.insert(len(df.columns), 'total', df[['nonfarm_yearly_sum', 'farm_income_yearly_sum', 'livestock_income_yearly_sum']].sum(axis=1))
df.insert(len(df.columns), 'constant', 1)

df.rename(columns = {'farm_income_yearly_sum': "Farm", 'livestock_income_yearly_sum': "Livestock", 
                   'nonfarm_yearly_sum': "Non-Farm", 'total': "Total"}, inplace=True)

outcomes = ["Farm", "Livestock", "Non-Farm", "Total"]

Results = {}

Results['Values (SSP)'] = ss_standard.results(df,outcomes,positive=False,logs=False,return_stats=True)
Results['Positive'] = ss_standard.results(df,outcomes,positive=True,logs=False,return_stats=True)
Results['Log Values'] = ss_standard.results(df,outcomes,positive=False,logs=True,return_stats=True)

other = pd.DataFrame({k:r[2].stack() for k,r in Results.items()})
other.index.names = ['Variable','Outcome']
other.columns.name = 'Class'
other = other.stack().unstack('Variable').reorder_levels(['Class','Outcome']).sort_index()
other = other.reindex(['Values (SSP)','Positive','Log Values'],level=0)

#print(df_to_orgtbl(other[['2014','2015']].unstack('Class'),float_fmt='%6.2f'))


print(ss_standard.table_stacked_by_class(Results,elide=True))

print(ss_standard.table_stacked_by_class(Results,elide=False))


#+end_src

#+results: income_table
#+name: tab:income
#+caption: Average treatment effects by group-year on total value (in SSP) of income reported in 2015 by sector.
| Class        | Outcome   | $\beta_{UPG}$    | $\beta_{UCT}$    | $\beta_{UPG}-\beta_{UCT}$ |
|--------------+-----------+------------------+------------------+---------------------------|
| Values (SSP) | Farm      | \(-137.45\)      | \( 60.12\)       | \(-197.57\)               |
|              | $N=522$   | (\( 98.53\))     | (\(138.09\))     | (\(169.64\))              |
|              | Livestock | \(474.63\)^{***} | \(  4.36\)       | \(470.27\)^{**}           |
|              | $N=522$   | (\(140.49\))     | (\(128.82\))     | (\(190.61\))              |
|              | Non-Farm  | \(1027.97\)      | \(493.85\)       | \(534.11\)                |
|              | $N=678$   | (\(991.00\))     | (\(1008.89\))    | (\(1414.19\))             |
|              | Total     | \(1330.07\)      | \(526.33\)       | \(803.74\)                |
|              | $N=678$   | (\(1005.04\))    | (\(1022.34\))    | (\(1433.62\))             |
| Positive     | Farm      | \( -0.00\)       | \(  0.01\)       | \( -0.01\)                |
|              | $N=522$   | (\(  0.01\))     | (\(  0.01\))     | (\(  0.01\))              |
|              | Livestock | \(  0.40\)^{***} | \(  0.18\)^{***} | \(  0.22\)^{***}          |
|              | $N=522$   | (\(  0.04\))     | (\(  0.06\))     | (\(  0.08\))              |
|              | Non-Farm  | \(  0.07\)^{*}   | \(  0.02\)       | \(  0.05\)                |
|              | $N=678$   | (\(  0.03\))     | (\(  0.05\))     | (\(  0.06\))              |
|              | Total     | \(  0.05\)^{***} | \( -0.02\)       | \(  0.07\)^{**}           |
|              | $N=678$   | (\(  0.02\))     | (\(  0.03\))     | (\(  0.03\))              |
| Log Values   | Farm      | \( -0.15\)       | \(  0.01\)       | \( -0.16\)                |
|              | $N=518$   | (\(  0.12\))     | (\(  0.17\))     | (\(  0.20\))              |
|              | Livestock | \(  0.53\)^{***} | \( -0.07\)       | \(  0.60\)^{**}           |
|              | $N=296$   | (\(  0.16\))     | (\(  0.23\))     | (\(  0.28\))              |
|              | Non-Farm  | \( -0.12\)       | \( -0.26\)       | \(  0.14\)                |
|              | $N=538$   | (\(  0.12\))     | (\(  0.18\))     | (\(  0.22\))              |
|              | Total     | \(  0.15\)       | \( -0.04\)       | \(  0.19\)                |
|              | $N=645$   | (\(  0.11\))     | (\(  0.16\))     | (\(  0.20\))              |

#+results: income_table
#+name: tab:income_full
| Class        | Outcome   | $\beta_{UPG}$    | $\beta_{UCT}$    | Constant          | $\beta_{UPG}-\beta_{UCT}$ |
|--------------+-----------+------------------+------------------+-------------------+---------------------------|
| Values (SSP) | Farm      | \(-137.45\)      | \( 60.12\)       | \(906.03\)^{***}  | \(-197.57\)               |
|              | $N=522$   | (\( 98.53\))     | (\(138.09\))     | (\( 71.24\))      | (\(169.64\))              |
|              | Livestock | \(474.63\)^{***} | \(  4.36\)       | \(368.42\)^{***}  | \(470.27\)^{**}           |
|              | $N=522$   | (\(140.49\))     | (\(128.82\))     | (\( 88.23\))      | (\(190.61\))              |
|              | Non-Farm  | \(1027.97\)      | \(493.85\)       | \(3374.93\)^{***} | \(534.11\)                |
|              | $N=678$   | (\(991.00\))     | (\(1008.89\))    | (\(271.88\))      | (\(1414.19\))             |
|              | Total     | \(1330.07\)      | \(526.33\)       | \(4346.65\)^{***} | \(803.74\)                |
|              | $N=678$   | (\(1005.04\))    | (\(1022.34\))    | (\(297.53\))      | (\(1433.62\))             |
| Positive     | Farm      | \( -0.00\)       | \(  0.01\)       | \(  0.99\)^{***}  | \( -0.01\)                |
|              | $N=522$   | (\(  0.01\))     | (\(  0.01\))     | (\(  0.01\))      | (\(  0.01\))              |
|              | Livestock | \(  0.40\)^{***} | \(  0.18\)^{***} | \(  0.40\)^{***}  | \(  0.22\)^{***}          |
|              | $N=522$   | (\(  0.04\))     | (\(  0.06\))     | (\(  0.03\))      | (\(  0.08\))              |
|              | Non-Farm  | \(  0.07\)^{*}   | \(  0.02\)       | \(  0.77\)^{***}  | \(  0.05\)                |
|              | $N=678$   | (\(  0.03\))     | (\(  0.05\))     | (\(  0.02\))      | (\(  0.06\))              |
|              | Total     | \(  0.05\)^{***} | \( -0.02\)       | \(  0.94\)^{***}  | \(  0.07\)^{**}           |
|              | $N=678$   | (\(  0.02\))     | (\(  0.03\))     | (\(  0.01\))      | (\(  0.03\))              |
| Log Values   | Farm      | \( -0.15\)       | \(  0.01\)       | \(  6.18\)^{***}  | \( -0.16\)                |
|              | $N=518$   | (\(  0.12\))     | (\(  0.17\))     | (\(  0.08\))      | (\(  0.20\))              |
|              | Livestock | \(  0.53\)^{***} | \( -0.07\)       | \(  5.84\)^{***}  | \(  0.60\)^{**}           |
|              | $N=296$   | (\(  0.16\))     | (\(  0.23\))     | (\(  0.14\))      | (\(  0.28\))              |
|              | Non-Farm  | \( -0.12\)       | \( -0.26\)       | \(  7.76\)^{***}  | \(  0.14\)                |
|              | $N=538$   | (\(  0.12\))     | (\(  0.18\))     | (\(  0.08\))      | (\(  0.22\))              |
|              | Total     | \(  0.15\)       | \( -0.04\)       | \(  7.79\)^{***}  | \(  0.19\)                |
|              | $N=645$   | (\(  0.11\))     | (\(  0.16\))     | (\(  0.07\))      | (\(  0.20\))              |


** Consumption
*** Discussion                                                       :ignore:
The next outcome of interest we consider is household consumption,
defined as the market value of goods or services used by the
household.  A sizable basket of goods were included in the survey
module. These are separated into three categories: Food items (with a
3-day recall window), non-durables (a 30-day recall window), and
durables and large expenditures (a one-year recall window).  We think
that data on consumption provides the most appropriate measure of household
welfare in our survey.

\Tab{consumption} reports on consumption expenditures aggregated
according to the period of recall.  There were large changes in prices
during the course of our experiment, and small changes in the way the
survey elicited item-level expenditures.  Both of these kinds of
changes make comparisons across time difficult to interpret, and might
make comparisons of total consumption misleading.

These data do permit us to answer the central question we're
interested in: what are the effects on consumption, about eight months
later, of enrolling randomly selected households into the UPG program
versus giving them a cash transfer of roughly equal value?  We
measured the effect of cash on a three-day recall of food consumption
12 months after the transfer, and find a statistically significant
increase of 14 SSP per day.  We first measured the effect of the UPG
program on average food consumption 6--9 months after the asset
transfers, and found a slightly larger effect of 18 SSP. The
differences between these two are not significant (see the \(t\)-test
in the row labeled $\beta_{UPG}^{2014}-\beta_{UCT}^{2015}$), and both
result in a 13--17% increase in the value of food expenditures
relative to the control group mean in 2015.

Turning our attention to consumption expenditures involving a monthly
recall period, both programs have positive effects of similar
magnitude, significant at the 10% level.  Differences between the two
are not significant. 

At annual frequencies we discover a significant difference: the effect
of the UPG program on average annual durable expenditures is
significantly greater (at the 10% level) than the effect of the UCT
program, with the average difference equal to 484 SSP, a 46% increase
relative to the average expenditures of the control group in 2015.

#+name: consumption_tables
#+begin_src python :noweb no-export :exports none  :results output table raw :var FE=0 baseline_na=1 :colnames no :tangle /tmp/consumption_tables.py
import statsmodels.api as sm
import pandas as pd
import numpy as np
from scipy import stats
from cfe.df_utils import df_to_orgtbl
import ss_standard

data_assignment  = "../../Report/documents/master_assignment.csv"
data_baseline = "../../TUP-data/data/Baseline/TUP_baseline.dta"
data_midline  = "../../TUP-data/Midline/TUP_midline.dta"
data_endline = "../../TUP-data/Endline/TUP_endline.dta"

df_b = pd.read_stata(data_baseline)
df_m = pd.read_stata(data_midline)
df_e = pd.read_stata(data_endline)
df_a = pd.read_csv(data_assignment)

# set Respondent ID number as the index
df_b.set_index('idno', inplace=True)
df_m.set_index('idno', inplace=True)
df_e.set_index('idno', inplace=True)
df_a.set_index('RespID', inplace=True)

# missing s20_6m_b and s20_7m_b in monthly for baseline - should be othermonth b
df_b.insert(len(df_b.columns), 'c_othermonth_b', df_b[ ['s20_6m_b', 's20_7m_b'] ].sum(axis=1))

# find variables that start with "c_" and remove "c_" and remove "_b", "_m", or "_e"
c2013 = df_b.filter(regex='^c_').rename(columns=lambda x: x[2:-2])
c2014 = df_m.filter(regex='^c_').rename(columns=lambda x: x[2:-2])
c2015 = df_e.filter(regex='^c_').rename(columns=lambda x: x[2:-2])

c2013['Year'] = '2013'
c2014['Year'] = '2014'
c2015['Year'] = '2015'

# missing durables from monthly for midline in previous code - added it in
# doesn't make sense to ask for clothing and footwear in total and then women's clothes, children's clothes, school uniforms, shoes in midline and endline
# ^ and they don't always sum up - change this?
# #some not asked for in baseline

food = ['cereals', 'maize', 'sorghum', 'millet', 'potato', 'sweetpotato', 'rice', 'bread', 'beans', 'oil', 'salt', 'sugar', 'meat', 'poultry', 'fish', 'egg', 'nuts', 'milk', 'vegetables', 'fruit', 'tea', 'spices', 'alcohol', 'otherfood']
month = ['fuel', 'medicine', 'airtime', 'cosmetics', 'soap', 'transport', 'entertainment', 'childcare', 'tobacco', 'batteries', 'durables', 'church', 'othermonth']    
year = ['clothesfootwear', 'womensclothes', 'childrensclothes', 'shoes', 'homeimprovement', 'utensils', 'furniture', 'textiles', 'ceremonies', 'funerals', 'charities', 'dowry', 'other']    

outcomes = ["Food", "Monthly", "Yearly"]

# not replacing 0s with np.nan; seems to be 4 observations that have legitimate 0s
for var in (c2013, c2014, c2015):
    
    var["Food"] = var.filter(items=food).sum(axis=1)
    var["Monthly"] = var.filter(items=month).sum(axis=1)
    var["Yearly"] = var.filter(items=year).sum(axis=1)
    
    # set up to make year dummies
    var['2013'] = 0
    var['2014'] = 0
    var['2015'] = 0
    
    # set up baseline2013 variables
    for outcome in outcomes: 
        var[outcome+'2013'] = c2013[outcome]

# make year dummies
c2013['2013'].replace(to_replace = 0, value = 1, inplace=True)
c2014['2014'].replace(to_replace = 0, value = 1, inplace=True)
c2015['2015'].replace(to_replace = 0, value = 1, inplace=True)

df2 = pd.concat((c2013, c2014, c2015))
# add group dummies from master_assignment.csv
df = df2.join((df_a[ ['Group'] ].join(pd.get_dummies(df_a['Group']))))   

Results = {}

Results['Values (SSP)'] = ss_standard.results(df,outcomes,positive=False,logs=False,return_stats=True)
Results['Positive'] = ss_standard.results(df,outcomes,positive=True,logs=False,return_stats=True)
Results['Log Values'] = ss_standard.results(df,outcomes,positive=False,logs=True,return_stats=True)

other = pd.DataFrame({k:r[2].stack() for k,r in Results.items()})
other.index.names = ['Variable','Outcome']
other.columns.name = 'Class'
other = other.stack().unstack('Variable').reorder_levels(['Class','Outcome']).sort_index()
other = other.reindex(['Values (SSP)','Positive','Log Values'],level=0)

print(df_to_orgtbl(other[['2014','2015']].unstack('Class'),float_fmt='%6.2f'))


print(ss_standard.table_stacked_by_class(Results,elide=True))

print(ss_standard.table_stacked_by_class(Results,elide=False))


#+end_src

#+results: consumption_tables
|         |         2014 |          |            |         2015 |          |            |
| Outcome | Values (SSP) | Positive | Log Values | Values (SSP) | Positive | Log Values |
|---------+--------------+----------+------------+--------------+----------+------------|
| Food    |        79.09 |     1.00 |       4.19 |       106.04 |     0.99 |       4.45 |
| Monthly |       253.98 |     1.00 |       5.08 |       296.78 |     0.99 |       5.32 |
| Yearly  |       830.49 |     0.96 |       6.09 |      1049.22 |     0.96 |       6.09 |

#+name: tab:consumption
#+caption: Effect on consumption expenditures with different periods of recall.  Food expenditures are for the past three days, non-durable non-food for the past month, and durables the past year.
| Class        | Outcome  | $\beta_{UPG}^{2014}$ | $\beta_{UPG}^{2015}$ | $\beta_{UCT}^{2014}$ | $\beta_{UCT}^{2015}$ | $\beta_{UPG}^{2014} - \beta_{UCT}^{2015}$ | $\beta_{UPG}^{2015} - \beta_{UCT}^{2015}$ |
|--------------+----------+----------------------+----------------------+----------------------+----------------------+-------------------------------------------+-------------------------------------------|
| Values (SSP) | Food     | \( 16.85\)^{***}     | \(  4.02\)           | \( -4.78\)           | \( 16.06\)^{***}     | \(  0.79\)                                | \(-12.04\)^{**}                           |
|              | $N=1157$ | (\(  3.20\))         | (\(  2.60\))         | (\(  4.43\))         | (\(  3.93\))         | (\(  5.07\))                              | (\(  4.72\))                              |
|              | Monthly  | \( 62.83\)^{***}     | \( 30.52\)^{**}      | \( 37.09\)           | \( 46.43\)^{**}      | \( 16.40\)                                | \(-15.91\)                                |
|              | $N=1157$ | (\( 16.92\))         | (\( 13.78\))         | (\( 23.68\))         | (\( 21.02\))         | (\( 26.98\))                              | (\( 25.13\))                              |
|              | Yearly   | \(462.08\)^{***}     | \(  8.31\)           | \(-149.48\)          | \(-38.69\)           | \(500.77\)^{***}                          | \( 47.01\)                                |
|              | $N=1157$ | (\( 95.73\))         | (\( 77.84\))         | (\(133.98\))         | (\(118.68\))         | (\(152.48\))                              | (\(141.94\))                              |
| Positive     | Food     | \(  0.00\)           | \(  0.00\)           | \( -0.01\)           | \(  0.00\)           | \(  0.00\)                                | \(  0.00\)                                |
|              | $N=1157$ | (\(  0.01\))         | (\(  0.00\))         | (\(  0.01\))         | (\(  0.01\))         | (\(  0.01\))                              | (\(  0.01\))                              |
|              | Monthly  | \( -0.00\)           | \( -0.00\)           | \( -0.03\)^{***}     | \(  0.01\)           | \( -0.01\)^{*}                            | \( -0.01\)                                |
|              | $N=1157$ | (\(  0.00\))         | (\(  0.00\))         | (\(  0.01\))         | (\(  0.01\))         | (\(  0.01\))                              | (\(  0.01\))                              |
|              | Yearly   | \(  0.02\)^{**}      | \(  0.00\)           | \(  0.01\)           | \( -0.01\)           | \(  0.04\)^{**}                           | \(  0.02\)                                |
|              | $N=1157$ | (\(  0.01\))         | (\(  0.01\))         | (\(  0.01\))         | (\(  0.01\))         | (\(  0.01\))                              | (\(  0.01\))                              |
| Log Values   | Food     | \(  0.21\)^{***}     | \(  0.04\)           | \(  0.00\)           | \(  0.15\)^{***}     | \(  0.06\)                                | \( -0.11\)^{**}                           |
|              | $N=1148$ | (\(  0.04\))         | (\(  0.03\))         | (\(  0.05\))         | (\(  0.04\))         | (\(  0.06\))                              | (\(  0.05\))                              |
|              | Monthly  | \(  0.32\)^{***}     | \(  0.14\)^{***}     | \(  0.12\)^{*}       | \(  0.18\)^{***}     | \(  0.14\)^{**}                           | \( -0.04\)                                |
|              | $N=1149$ | (\(  0.05\))         | (\(  0.04\))         | (\(  0.06\))         | (\(  0.05\))         | (\(  0.07\))                              | (\(  0.07\))                              |
|              | Yearly   | \(  0.13\)^{*}       | \(  0.02\)           | \( -0.08\)           | \(  0.11\)           | \(  0.02\)                                | \( -0.09\)                                |
|              | $N=1117$ | (\(  0.07\))         | (\(  0.06\))         | (\(  0.10\))         | (\(  0.09\))         | (\(  0.11\))                              | (\(  0.11\))                              |

It is worth noting that the effects of the UPG program on consumption
are not lasting---two years after the distribution of assets (in 2015)
the average consumption expenditures in the UPG group are not
significantly different from that of the control across all types of
consumption.  The delayed roll-out of UCT intervention means that we
can't measure the two-year effects of this program on these measures
of consumption.

** Food Insecurity

Observed changes in total consumption don't translate into significant
decreases in reported food insecurity.  In each year, we ask how often
in a given week the respondent has had experiences indicative of food
insecurity. Included are (from left to right) eating "fewer meals"
during the day than usual; going a whole day without eating, going to
"sleep hungry"; having "no food in the house"; eating only "limited
portions" at mealtimes; going the "whole day without eating"; and
being "worried" about not having enough food.  The rows corresponding
to 2014 and 2015 can be interpreted as the proportion of people who
report experiencing each in a typical week.  While average levels of
these variables indicate very high food insecurity, and an
increase in food insecurity between 2014 and 2015, the estimated
effects of both the UPG and UCT programs are comparatively small and
are generally statistically insignificant.

*** Notes on Recreating food insecurity table                      :noexport:

The table looks at whether respondents experienced going a whole
day without eating, limiting portions, etc. in a typical week.  
The z-score is calculated by taking the sum of binary variables 'worried', 
'portions', 'fewmeals', 'nofood', 'hungry', 'wholeday' for each
individual, separately at baseline, midline, and endline. Call that
'fs_sum_m' for an individual's sum at midline. Then their z-score at
midline  would be (fs_sum_m - fs_sum_m.mean())/fs_sum_m.std(). CTL
mean lists the mean and standard deviation of the control group in 2015.

Differences with previous code: 
-correction for what should be considered "weekly" (this code
includes "Everyday", "3-6 times a week", and "1-2 times a week" as
being considered weekly, whereas the previous code left out "1-2 times a week")
-This code adds 'worried' to the table. It uses 'worried' to
calculate the z-score, which  was also used to calculate
the z-score in the previous table.

Next steps: 
-change how the z-score is being calculated because .sum(axis=1)
equates NaN to 0, so some respondents who had NaN for every measure
will still have a z-score, hence the higher N for 'z-score' than for
the other variables
-divide the standard deviation of CTL mean by the sqrt of the number of control
observations to make it comparable with the other point estimates and
standard errors in the table?
-add another column with f statistic for joint hypothesis that all coefficients are equal to 0

#+name: food_insecurity
#+begin_src python :noweb no-export :exports none  :results output table raw :var FE=1 :colnames no :tangle food_security.py
data_assignment  = "../../Report/documents/master_assignment.csv"
data_baseline = "../../TUP-data/data/Baseline/TUP_baseline.dta"
data_midline  = "../../TUP-data/Midline/TUP_midline.dta"
data_endline = "../../TUP-data/Endline/TUP_endline.dta"

import statsmodels.api as sm
import pandas as pd
import numpy as np
from scipy import stats
from scipy.linalg import block_diag
from cfe.df_utils import df_to_orgtbl

df_b = pd.read_stata(data_baseline)
df_m = pd.read_stata(data_midline)
df_e = pd.read_stata(data_endline)
df_a = pd.read_csv(data_assignment).rename(columns={'RespID':'idno'})

# set Respondent ID number as the index
df_b.set_index('idno', inplace=True)
df_m.set_index('idno', inplace=True)
df_e.set_index('idno', inplace=True)
df_a.set_index('idno', inplace=True)

df_b['Year'] = 2013
df_m['Year'] = 2014
df_e['Year'] = 2015

# merge baseline and midline based on idno index
df = pd.merge(df_b[ ['Year','fs_worried_b', 'fs_portions_b', 
                     'fs_fewmeals_b', 'fs_nofood_b', 
                     'fs_hungry_b', 'fs_wholeday_b'] ], 
              df_m[ ['Year','fs_worried_m', 'fs_portions_m', 
                      'fs_fewmeals_m', 'fs_nofood_m', 
                      'fs_hungry_m', 'fs_wholeday_m'] ], 
              how='outer', left_index=True, right_index=True)

# merge baseline/midline and endline based on idno index
df = pd.merge(df, 
              df_e[ ['Year','fs_worried_e', 'fs_portions_e', 
                     'fs_fewmeals_e', 'fs_nofood_e', 
                     'fs_hungry_e', 'fs_wholeday_e'] ], 
              how='outer', left_index=True, right_index=True)

# replace words with their corresponding code number from the survey
df.replace({"Everyday": 1,
            "everyday": 1,
            "3-6 times a week": 2,
            "1-2 times a week": 3,
            "Less than once a week": 4,
            "less than once a week": 4,
            "Never": 5,
            "never": 5}, inplace=True)

# for weekly, replace 4 and 5 with 0, and 1, 2, and 3 with 1
df.replace({1: 1, 2: 1, 3: 1, 4: 0, 5: 0}, inplace=True)

# find columns that start with "fs_" and end with "_b", "_m", or "_e"
# cut off the first 3 characters "fs_" and the last 2 "_b", "_m", or "_e"
fs2013 = df.filter(regex="^fs_.*_b").rename(columns=lambda x: x[3:-2])
fs2014 = df.filter(regex="^fs_.*_m").rename(columns=lambda x: x[3:-2])
fs2015 = df.filter(regex="^fs_.*_e").rename(columns=lambda x: x[3:-2])

fs2013['Year'] = '2013'
fs2014['Year'] = '2014'
fs2015['Year'] = '2015'

# used to calculate the z-score
index_vars = ['worried', 'portions', 'fewmeals', 'nofood', 'hungry', 'wholeday']
outcomes = ['z-score'] + index_vars 

for FS in (fs2013, fs2014, fs2015): 
    fs_sum = FS[index_vars].sum(axis=1)
    FS['z-score'] = (fs_sum - fs_sum.mean())/fs_sum.std()
    
    # set up to make year dummies
    FS.insert(len(FS.columns), '2013', 0)
    FS.insert(len(FS.columns), '2014', 0)
    FS.insert(len(FS.columns), '2015', 0)
    
    # baseline values as 'var'2013
    for var in outcomes: 
        FS[var+'2013'] = fs2013[var]
    
# make year dummmies
fs2013['2013'].replace(to_replace = 0, value = 1, inplace=True)
fs2014['2014'].replace(to_replace = 0, value = 1, inplace=True)
fs2015['2015'].replace(to_replace = 0, value = 1, inplace=True)

df2 = pd.concat((fs2013, fs2014, fs2015))
# make group dummies using 'Group' from master_assignment.csv
df = df2.join((df_a[ ['Group'] ].join(pd.get_dummies(df_a['Group']))))

# make interaction variables
df.insert(len(df.columns), 'UPG*2013', df['2013']*df['UPG'])
df.insert(len(df.columns), 'UPG*2014', df['2014']*df['UPG'])
df.insert(len(df.columns), 'UPG*2015', df['2015']*df['UPG'])
df.insert(len(df.columns), 'UCT*2013', df['2013']*df['UCT'])
df.insert(len(df.columns), 'UCT*2014', df['2014']*df['UCT'])
df.insert(len(df.columns), 'UCT*2015', df['2015']*df['UCT'])

baseline_na = True

controls = ['UPG*2014', 'UPG*2015', 'UCT*2014', 'UCT*2015', '2014', '2015']
outcomes = ['z-score', 'wholeday', 'hungry', 'nofood', 'fewmeals', 'portions', 'worried']
outcomes = ['wholeday', 'hungry', 'nofood', 'fewmeals', 'portions', 'worried']

# remove observations from 2013
df = df[df['Year'] != '2013']
df = df.reset_index().set_index(['idno','Year'])

myX = {}
myY = {}
for outcome in outcomes: 
    temp_df = df[ [outcome, outcome + "2013", 'Control'] + controls]
    temp_df.rename(columns={outcome+"2013":'Baseline value'},inplace=True)
    temp_controls = controls
    
    if baseline_na==True:
        
        # indicator for whether outcome in 2013 is na, and cast it to be an integer
        temp_df["Baseline missing"] = temp_df["Baseline value"].isnull().apply(int)
        
        # code missing values of the baseline variable as 0
        temp_df["Baseline missing"].fillna(0,inplace=True)
        
        temp_controls = temp_controls + ['Baseline missing']
    
    temp_controls = temp_controls + ["Baseline value"]
    temp_df = temp_df.dropna()

    myX[outcome] = temp_df[temp_controls]
    myY[outcome] = temp_df[outcome]

myY = pd.concat(myY)
myX = pd.DataFrame(block_diag(*myX.values()),
                   columns=pd.concat(myX,axis=1).columns,
                   index=myY.index)
    
est = sm.OLS(myY,myX).fit()
b = est.params
se = est.bse

b.index = pd.MultiIndex.from_tuples([tuple(i.split('_')) for i in est.params.index])
se.index = pd.MultiIndex.from_tuples([tuple(i.split('_')) for i in est.params.index])    


b = b.unstack()
b['UPG*2014 - UCT*2015'] = b['UPG*2014'] - b['UCT*2015']
b['UPG*2015 - UCT*2015'] = b['UPG*2015'] - b['UCT*2015']
b = b.T
b.rename(columns={'worried':'Worried', 'portions':'Limited portions', 'fewmeals':'Fewer Meals', 'nofood':'No food in house', 'hungry':'Went hungry', 'wholeday':'Whole day without eating'},inplace=True)

se = se.unstack()
se['UPG*2014 - UCT*2015'] = np.sqrt(se['UPG*2014']**2 + se['UCT*2015']**2)
se['UPG*2015 - UCT*2015'] = np.sqrt(se['UPG*2015']**2 + se['UCT*2015']**2)

se = se.T
se.rename(columns={'worried':'Worried', 'portions':'Limited portions', 'fewmeals':'Fewer Meals', 'nofood':'No food in house', 'hungry':'Went hungry', 'wholeday':'Whole day without eating'},inplace=True)

print(df_to_orgtbl(b,sedf=se))
#+end_src

*** food insecurity table                                            :ignore:

#+name: tab:food_insecurity
#+caption: Effects of programs on different measures of food insecurity.
|                                         | Fewer           | Went            | No food         | Limited         | Whole day       |                 |
|                                         | Meals           | hungry          | in house        | portions        | without eating  | Worried         |
|-----------------------------------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------|
| 2014                                    | \(0.716\)^{***} | \(0.370\)^{***} | \(0.470\)^{***} | \(0.660\)^{***} | \(0.369\)^{***} | \(0.758\)^{***} |
|                                         | (\(0.046\))     | (\(0.036\))     | (\(0.040\))     | (\(0.036\))     | (\(0.035\))     | (\(0.050\))     |
| 2015                                    | \(0.735\)^{***} | \(0.430\)^{***} | \(0.561\)^{***} | \(0.795\)^{***} | \(0.461\)^{***} | \(0.917\)^{***} |
|                                         | (\(0.044\))     | (\(0.034\))     | (\(0.038\))     | (\(0.034\))     | (\(0.033\))     | (\(0.048\))     |
| Baseline missing                        | \(0.000\)       | \(0.000\)       | \(0.000\)       | \(0.000\)       | \(0.000\)       | \(0.000\)       |
|                                         | (\(0.000\))     | (\(0.000\))     | (\(0.000\))     | (\(0.000\))     | (\(0.000\))     | (\(0.000\))     |
| Baseline value                          | \(0.014\)       | \(0.058\)^{**}  | \(0.050\)       | \(0.027\)       | \(0.010\)       | \(-0.030\)      |
|                                         | (\(0.038\))     | (\(0.028\))     | (\(0.033\))     | (\(0.028\))     | (\(0.028\))     | (\(0.043\))     |
| UPG*2014                                | \(-0.037\)      | \(-0.058\)      | \(-0.085\)^{*}  | \(0.065\)       | \(-0.020\)      | \(0.055\)       |
|                                         | (\(0.044\))     | (\(0.043\))     | (\(0.044\))     | (\(0.044\))     | (\(0.044\))     | (\(0.044\))     |
| UPG*2015                                | \(0.063\)       | \(0.079\)^{*}   | \(0.025\)       | \(-0.014\)      | \(0.013\)       | \(-0.019\)      |
|                                         | (\(0.041\))     | (\(0.041\))     | (\(0.042\))     | (\(0.042\))     | (\(0.042\))     | (\(0.042\))     |
| UCT*2014                                | \(-0.012\)      | \(-0.017\)      | \(0.015\)       | \(0.037\)       | \(-0.017\)      | \(0.052\)       |
|                                         | (\(0.053\))     | (\(0.053\))     | (\(0.054\))     | (\(0.054\))     | (\(0.054\))     | (\(0.053\))     |
| UCT*2015                                | \(0.037\)       | \(0.048\)       | \(0.051\)       | \(-0.009\)      | \(-0.015\)      | \(-0.010\)      |
|                                         | (\(0.052\))     | (\(0.052\))     | (\(0.053\))     | (\(0.053\))     | (\(0.053\))     | (\(0.052\))     |
|-----------------------------------------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------|
| $\beta^{2014}_{UPG}-\beta^{2015}_{UCT}$ | \(-0.073\)      | \(-0.105\)      | \(-0.136\)^{**} | \(0.074\)       | \(-0.004\)      | \(0.065\)       |
|                                         | (\(0.068\))     | (\(0.068\))     | (\(0.068\))     | (\(0.068\))     | (\(0.069\))     | (\(0.068\))     |
| $\beta^{2015}_{UPG}-\beta^{2015}_{UCT}$ | \(0.027\)       | \(0.032\)       | \(-0.026\)      | \(-0.005\)      | \(0.028\)       | \(-0.008\)      |
|                                         | (\(0.067\))     | (\(0.067\))     | (\(0.067\))     | (\(0.067\))     | (\(0.068\))     | (\(0.067\))     |

** Exposure to Conflict
*** Discussion                                                       :ignore:
In 2014, households were surveyed shortly after the NGO's offices had re-opened in
the wake of the outbreak of widespread armed conflict. Respondents were asked a short
set of questions about whether they were directly affected, and if so, in what way.
There had only been a few incidents of violence near Yei town at that point, and the most
directly involved ethnic groups made up a small portion of the local population. There
is no clear comparison group to which we might compare our sample, and the economic
climate changed over this same period in several ways that were probably not directly
caused by the violence.  We have no clear means of identifying the effect of
the conflict itself on household welfare. Nonetheless, it is interesting to consider
correlates with self-reported exposure to the conflict, and to see if program
assignment had any effect on households' reported exposure or response.

In Table [[tab:conflict]], the UCT group is included with controls
because the cash transfers weren't given out until immediately after
the midline survey, and this table uses data from the midline
survey. All variables are binary variables. CTL mean comes from the constant
and its standard error in the regression.

Our main outcomes of interest are whether individuals say they were
/"Worried"/ or "directly /Affected/" by the violence, unable to invest
(/"NoInvest"/) in a farm or business as a result, /"Migrated"/ as a
cautionary measure, or did something else to /"ProtectLives"/ of family
members.  A final question among those who took no cautionary measures
was whether this because they did not have the means (/"NoMeans"/). UPG
participants are 24% (13 pp.) less likely to report having been
"Affected" by the conflict, and 38% (7.6 pp.) less likely to report
that they were affected specifically by being unable to plant crops or
invest in their business. This was the second most common way in which
households reported being affected behind "needed to relocate or
migrate", where UPG respondents are not clearly different. Finally,
UPG respondents were significantly less likely (10.9 pp) to report
that they took no action to help others because they lacked the means
(/NoMeans/) to do so.

Overall, nearly all households were worried (93%), and nearly 40%
migrated to avoid violence; 31% also did something else to protect the
lives of their family members.  In these reactions UPG households were
not detectably different from the control group.  However, UPG
households were significantly (13 pp.) less likely to report that they were
directly affected by violence; also 8 pp. less likely to report that
their ability to invest in land or business was affected by the
conflict; and 11 pp. less likely to report that any /lack/ of action
was due to a lack of means.  All these significant differences
seem to indicate that the UPG program had some mitigating effect on
the effects of conflict on the household.

*** Recreating the exposure to conflict table                        :ignore:

*************** NOTE
Affected and Worried are whether or not respondents answered that they
were "directly affected by any of the violence" or "worried that the
conflict would affect you since December," respectively. NoInvest is
whether they said that one way they were directly affected is that
they could not invest in business. NoMeans is whether they said they
did not do anything to protect the lives of family members or to
protect their assets, and listed the reason as "didn't have the
means." ProtectLives is whether the respondent did anything (including
migration) besides "nothing" to protect the lives of their family
members - this could be migrating to stay with friend or family,
migrating and finding own accommodation, looking for protection with
NGO, or looking for protection with government or military. Migrated
is if the respondent listed migration as one of the ways they were
directly affected, and/or if they said they migrated to protect the
lives of their family.

Differences with previous code: 
-this code adds relevant variables ('s22_4d_m' and 's22_4e_m': other
ways you were directly affected by conflict) which were not renamed to
include 'conflict'
-N for NoMeans in this table is lower than in the previous table
because the question was: if they answered no to the previous two
questions, 'why did you do nothing to protect yourself and assets?'
So only a subset of people who said they didn't do anything to protect 
the lives of their family members AND didn't do anything to protect 
their assets would be asked this question and therefore able to answer 
'didn't have the means' to the question. Therefore, N for NoMeans in 
this table is lower than in the previous table because it takes into 
account that the NaNs should not be changed to 0s because people who 
had NaNs either did something to protect the lives of their family 
members or to protect their assets

Next steps: 
-recreate bar graph figure
*************** END


#+name: conflict
#+begin_src python :noweb no-export :exports none  :results output table raw labels=[] :colnames no
data_midline  = "../../TUP-data/Midline/TUP_midline.dta"
data_assignment  = "../../Report/documents/master_assignment.csv"
import statsmodels.api as sm
import pandas as pd
import numpy as np
from cfe.df_utils import df_to_orgtbl

df_m = pd.read_stata(data_midline)
df_a = pd.read_csv(data_assignment)

# change 'Cash' to 'Control' because the cash transfers weren't given out until immediately after midline survey
df_a.replace(to_replace="Cash", value="Control", inplace=True)

df = pd.merge(df_m, df_a[ ['RespID', 'Group'] ], how='inner', left_on="idno", right_on="RespID")

df.set_index(['idno', 'Group'], inplace=True)

# add relevant variables which were not renamed to include 'conflict'
named_without_conflict = df.filter(regex="^s22_.")

# make a dataframe of variables with 'conflict' in them and join it with the other relevant variables
df = df.filter(like='conflict')
df = df.join(named_without_conflict)

# Affected and Worried are the binary variables of whether they responded yes (1) or no (0) to being affected and worried
df.rename(columns={"conflict_affected_m": "Affected", "conflict_worried_m": "Worried"}, inplace = True)

# NoMeans variable is whether they answered 'didn't have the means' to question 'why did you do nothing to protect yourself and assets?'
# NaNs should not be counted as 0s because some people were not asked this question, so the people who were asked this question would be a smaller subset 
df.replace({"Didn't have the means": 1, 
 "Not necessary/Didn't fee in danger": 0, 
 "Didn't have the suport from othes": 0, 
 "Felt in danger but decided to rist it": 0}, inplace=True)

df.rename(columns={'conflict_whynotprotect_m': 'NoMeans'}, inplace = True)

# no invest is only if directly affected by could not invest in business
affected_business = ['conflict_affected1_m', 'conflict_affected2_m', 'conflict_affected3_m', 's22_4d_m', 's22_4e_m']
df_business = df[affected_business]

df_business.replace({"Could not plant crop or invest in business": 1, 
 "Death in Familuy": 0, 
 "Needed to elocate or migrate": 0, 
 "Loss of assets": 0, 
 "HH memebr went to fight": 0,
 "Business was harmed": 0}, inplace=True)

df_business.insert(len(df_business.columns), 'NoInvest', df_business[affected_business].sum(axis=1))

df = df.join(df_business['NoInvest'])
del df_business

# migrated is only if directly affected by migration or migrated to protect lives 
affected_migration = ['conflict_affected1_m', 'conflict_affected2_m', 'conflict_affected3_m', 's22_4d_m', 's22_4e_m', 'conflict_protectlives_m']
df_migration = df[affected_migration]

df_migration.replace({"Could not plant crop or invest in business": 0, 
 "Death in Familuy": 0, 
 "Needed to elocate or migrate": 1, 
 "Loss of assets": 0, 
 "HH memebr went to fight": 0,
 "Business was harmed": 0,
 "Migrate to stay with friend/family": 1,
 "Migrated and found new accommodation": 1,                     
 "Nothing": 0,                     
 "Looked for protection with Govt. Military": 0,
 "Looked for protection with NGO": 0}, inplace=True)

df_migration.insert(len(df_migration.columns), 'Migrated', df_migration[affected_migration].sum(axis=1))
# replace 2s with 1s because the 2s just double count migration
df_migration.replace(to_replace=2, value=1, inplace=True)

df = df.join(df_migration['Migrated'])
del df_migration

# protect lives is anything (including migration) besides nothing 
df['conflict_protectlives_m'].replace({"Nothing": 0, 
                                       "Migrate to stay with friend/family": 1, 
                                       "Migrated and found new accommodation": 1, 
                                       "Looked for protection with Govt. Military": 1,
                                       "Looked for protection with NGO": 1}, inplace = True)

df.rename(columns={'conflict_protectlives_m': 'ProtectLives'}, inplace = True)

outcomes = ["Affected", "Migrated", "NoInvest", "NoMeans", "ProtectLives", "Worried"]

df.insert(len(df.columns), 'constant', 1)

# make 'Group' index a column
df.reset_index(level=['Group'], inplace=True)

df = df.join(pd.get_dummies(df['Group']))
controls = ["constant", "UPG"]

models_ols = {}
d={}

for outcome in outcomes: 
    
    temp_df = df[controls + [outcome]].dropna()
    models_ols[outcome] = sm.OLS(temp_df[outcome], temp_df[controls]).fit()
    
    # make a dictionary with the coefficients, standard errors, F-Stats and Ns
    d[outcome] = [round(models_ols[outcome].params[0], 3), models_ols[outcome].bse[0],
                  round(models_ols[outcome].params[1], 3), models_ols[outcome].bse[1], 
                  models_ols[outcome].fvalue, models_ols[outcome].nobs]
   
    if models_ols[outcome].pvalues[0] <= 0.01: 
        d[outcome][0] = str(d[outcome][0]) + '***'
    elif models_ols[outcome].pvalues[0] <= 0.05: 
        d[outcome][0] = str(d[outcome][0]) + '**'
    elif models_ols[outcome].pvalues[0] <= 0.1:
        d[outcome][0] = str(d[outcome][0]) + '*'
        
    # second coefficient is beneath standard error so add asterisks to d[outcome][2] not d[outcome][1]
    if models_ols[outcome].pvalues[1] <= 0.01: 
        d[outcome][2] = str(d[outcome][2]) + '***'
    elif models_ols[outcome].pvalues[1] <= 0.05: 
        d[outcome][2] = str(d[outcome][2]) + '**'
    elif models_ols[outcome].pvalues[1] <= 0.1:
        d[outcome][2] = str(d[outcome][2]) + '*'
    
    del temp_df

final = pd.DataFrame(data=d)
final.rename(index = {0: "CTL mean", 1: "  ", 2: "UPG", 3: "   ", 4: "F-stat", 5: "N"}, inplace=True)
newdf1 = df_to_orgtbl(final.loc[ ["CTL mean", "  ", "UPG", "   "] ], float_fmt = '%.3f')
newdf2 = df_to_orgtbl(final.loc[ ["$F$-stat", "$N$"] ], float_fmt = '%.3f')
print("|-\n" + newdf1 + "|-\n" + newdf2 + "|-\n")

#+end_src

#+RESULTS: exposure_to_conflict

#+name: tab:conflict
#+caption: Average treatment effects by group-year on the probability of having been affected in a significant way by the outbreak of violence in late 2013
#+attr_latex: :environment longtable :align lrrrrrr
|------------+----------+----------+----------+---------+--------------+---------|
|            | Affected | Migrated | NoInvest | NoMeans | ProtectLives | Worried |
|------------+----------+----------+----------+---------+--------------+---------|
| CTL mean   |  0.53*** |  0.37*** |  0.18*** | 0.54*** |      0.31*** | 0.93*** |
|            |     0.03 |     0.03 |     0.02 |    0.03 |         0.03 |    0.01 |
| UPG        | -0.13*** |    -0.01 |  -0.08** | -0.11** |         0.04 |   -0.02 |
|            |     0.04 |     0.04 |     0.03 |    0.05 |         0.04 |    0.02 |
|------------+----------+----------+----------+---------+--------------+---------|
|            | Affected | Migrated | NoInvest | NoMeans | ProtectLives | Worried |
|------------+----------+----------+----------+---------+--------------+---------|
| \(F\)-stat |     9.20 |     0.01 |     6.61 |    4.38 |         1.00 |    0.49 |
| $N$        |      601 |      606 |      606 |     402 |          585 |     603 |
|------------+----------+----------+----------+---------+--------------+---------|

* Conclusion
  <<sec:conclusion>>
  
BRAC's South Sudan pilot of the UPG program represents the only such test of the
ultra-poor graduation framework conducted in an area of significant political and
economic instability. It also represents one of the only direct comparisons of this
model to a similarly expensive unconditional cash transfer, arguably the most
sensible benchmark for success.  Though our study does not generalize to
contexts with high-functioning cash economies and relative political
stability, within its context it provides some clues about the
benefits of both UPG and UCT programs.

Cash transfers appear to increase consumption and possibly shift
investment from agriculture to non-farm activities, without a related
increase in wealth or income.  Conversely, the UPG program increased
wealth and directly shifted work from agriculture to livestock, with
increased consumption in the short run. We also find that having
received asset transfers dampened the negative investment effects
following the outbreak of violence.  It is impossible to say whether a
cash transfer would have had a similar mitigating effect.  We
tentatively conclude that targeted asset transfers can play a
constructive role in helping poor, self-employed households when they
face economic uncertainty. And while cash increases household
consumption, the goal of improving income or wealth is well served by
the additional services that the ultra-poor graduation framework
offer.
  
* References
   \renewcommand{\refname}{}
   \printbibliography


#+latex: \appendix

* Balance & Selection
** Balance on Observables
*** Discussion                                                       :ignore:
We start by checking whether either treatment arm appears significantly different
from the control group in terms of average baseline observable characteristics.
Table [[tab:balance_check]] presents summary statistics by group on a range of factors
related to consumption, asset holdings, and household
characteristics.  Of all of these baseline characteristics, the only
cases in which we can reject the null of equality with the control
group are for the value of motorcycles and textiles.  The mean value
depends on both /whether/ a household possesses these assets, and
conditional on possession, the value of the asset.  Particularly for
the case of motorcycles one wonders whether a small difference in
rates of ownership might account for the difference, rather than the
value of the asset conditional on ownership.

*** Creation of master random assignment file                        :ignore:

#+name: master_random_assignment
#+begin_src python
"""For making the master treatment groups .csv file

 This code creates a file which contains all of the assignments to
 treatment groups, regardless of whether a respondent was found at
 one or all of baseline, midline, and endline. The file reconciles
 differences between asset_assign.csv and locations.csv. We consider
 asset_assign.csv to be the assignment at baseline, and locations.csv
 to be the assignment that was created at endline when some
 respondents who were not found at baseline were still surveyed at
 endline.

 There are 6 households that were interviewed only at endline and
 were not included in asset_assign.csv or locations.csv. These
 households are manually added as Control households in 
 master_assignment.csv, like the other households for which a 
 group was not assigned at baseline and therefore are labeled as 
 Control at endline.
"""

data_locations = "../../TUP-data/csv/locations.csv"
data_asset_assign = "../../TUP-data/csv/asset_assign.csv"
import pandas as pd

df_l = pd.read_csv(data_locations) # assignments at endline
df_a = pd.read_csv(data_asset_assign) # assignments at baseline

# take the union of locations.csv and asset_assign.csv, rename groups accordingly
df = pd.merge(df_l, df_a[ ['respid', 'group' ] ], how='outer', left_on='RespID', right_on='respid')
df.replace(to_replace='Gift', value='Control', inplace=True)
df.replace(to_replace='UPG-high asset', value='UPG', inplace=True)
df.replace(to_replace='Cash', value='UCT', inplace=True)

# asset_assign.csv assignments are listed under 'group'
# locations.csv assignments are listed under 'Group'

for i in range(len(df)): 

    # if a group is not assigned at baseline (in asset_assign 'group'), it should be 'Control' at endline (in locations 'Group') (takes care of observation idno 1157)
    if pd.isnull(df.iloc[i, df.columns.get_loc('group')]):
        df.iloc[i, df.columns.get_loc('Group')]='Control'
    
    # if a group is assigned at baseline (in asset_assign 'group'), it should be the same at endline (in locations 'Group') (takes care of observation idno 2131)
    if pd.notna(df.iloc[i, df.columns.get_loc('group')]) and (df.iloc[i, df.columns.get_loc('group')] != df.iloc[i, df.columns.get_loc('Group')]):
        df.iloc[i, df.columns.get_loc('Group')] = df.iloc[i, df.columns.get_loc('group')]

# now all the assignments in 'Group' should be consistent with 'group' so 'group' is a subset of 'Group' and we can drop it
df = df.drop(columns=['group', 'respid'])

# manually add the 6 households which were only interviewed at endline as 'Control'
df = df.append({'RespID': 1359,  'Group': 'Control'}, ignore_index=True)
df = df.append({'RespID': 1484,  'Group': 'Control'}, ignore_index=True)
df = df.append({'RespID': 1553,  'Group': 'Control'}, ignore_index=True)
df = df.append({'RespID': 1960,  'Group': 'Control'}, ignore_index=True)
df = df.append({'RespID': 2142,  'Group': 'Control'}, ignore_index=True)
df = df.append({'RespID': 2174,  'Group': 'Control'}, ignore_index=True)

df.to_csv('master_assignment.csv')
#+end_src

#+RESULTS: master_random_assignment


*** Recreating Elliott's balance table (without some variables which are sums of other variables) :ignore:

# N represents the number of nonzero values

#+name: mean_balance
#+begin_src python :noweb no-export :exports none  :results output table raw labels=[] :colnames no
# <<load_data>> can use this!!
data_baseline  = "../../TUP-data/data/Baseline/UPG_baseline.dta"
data_assignment  = "../../UPG-report/documents/master_assignment.csv"
import pandas as pd
from scipy import stats
from cfe.df_utils import df_to_orgtbl
import matplotlib. pyplot as plt

df_b = pd.read_stata(data_baseline)
df_a = pd.read_csv(data_assignment)

df = pd.merge(df_b, df_a[ ['RespID', 'Group'] ], how='inner', left_on="idno", right_on="RespID")

df_3_days = df[ ['c_meat_b', 'c_fish_b', 'c_cereals_b', 'c_sugar_b', 'c_egg_b', 'c_oil_b', 'c_beans_b', \
                    'c_fruit_b', 'c_salt_b', 'c_vegetables_b', \
                    'c_milk_b', 'c_spices_b', 'c_alcohol_b', 'c_otherfood_b'] ].transform(lambda x: x/3)

df_month = df[ ['c_fuel_b', 'c_soap_b', 'c_transport_b', 'c_cosmetics_b', 'c_entertainment_b'] ].transform(lambda x: x/30)

df_year = df[ ['c_clothesfootwear_b', 'c_charities_b', 'c_ceremonies_b', 'c_textiles_b', 'c_utensils_b',
                  'c_dowry_b', 'c_furniture_b', 'c_other_b'] ].transform(lambda x: x/365)

df_assets = df.get(['asset_val_cows_b', 'asset_val_smallanimals_b', 'asset_val_bicycle_b', 'asset_val_radio_b',
             'asset_val_motorcycle_b', 'asset_val_net_b', 'asset_val_poultry_b',
             'asset_val_bed_b', 'asset_val_chairtables_b', 'asset_val_mobile_b',
             'asset_val_netITN_b',
             'asset_n_house_b', 'in_business_b', 'child_total_b', 'hh_size_b',
             'Group'])

df_1 = df_3_days.join(df_month.join(df_year.join(df_assets)))

means = df_1.groupby(['Group']).mean()
means = means.T

means.insert(len(means.columns), '$\Delta$ UPG', means['UPG'] - means['Control'])
means.insert(len(means.columns), '$\Delta$ UCT', means['UCT'] - means['Control'])

d = {'Control': means['Control'], '$\Delta$ UPG': means['UPG'] - means['Control'], '$\Delta$ UCT': means['UCT'] - means['Control']}
means = pd.DataFrame(data=d)

# so we can add * later
means = means.round(decimals = 3)
means = means.astype(str)
means.insert(len(means.columns), 'N', 0)

column_list = ['c_meat_b', 'c_fish_b', 'c_cereals_b', 'c_sugar_b', 'c_egg_b', 'c_oil_b', 'c_beans_b', \
                    'c_fruit_b', 'c_salt_b', 'c_vegetables_b', \
                    'c_milk_b', 'c_spices_b', 'c_alcohol_b', 'c_otherfood_b', \
              'c_fuel_b', 'c_soap_b', 'c_transport_b', 'c_cosmetics_b', 'c_entertainment_b', \
               'c_clothesfootwear_b', 'c_charities_b', 'c_ceremonies_b', 'c_textiles_b', 'c_utensils_b',
                  'c_dowry_b', 'c_furniture_b', 'c_other_b', \
               'asset_val_cows_b', 'asset_val_smallanimals_b', 'asset_val_bicycle_b', 'asset_val_radio_b', \
             'asset_val_motorcycle_b', 'asset_val_net_b', 'asset_val_poultry_b', \
             'asset_val_bed_b', 'asset_val_chairtables_b', 'asset_val_mobile_b', \
             'asset_val_netITN_b', \
             'asset_n_house_b', 'in_business_b', 'child_total_b', 'hh_size_b']

# some are off by 0.001
for column in column_list:
    
    pvalue_tup = stats.ttest_ind(df_1[df_1['Group'] == 'UPG'][column], df_1[df_1['Group'] == 'Control'][column], nan_policy='omit').pvalue
    
    if pvalue_tup <= 0.01: 
        means.at[column,'$\Delta$ UPG'] = means.at[column,'$\Delta$ UPG'] + '***'
    elif pvalue_tup <= 0.05: 
        means.at[column,'$\Delta$ UPG'] = means.at[column,'$\Delta$ UPG'] + '**'
    elif pvalue_tup <= 0.1: 
        means.at[column,'$\Delta$ UPG'] = means.at[column,'$\Delta$ UPG'] + '*'
        
    pvalue_cash = stats.ttest_ind(df_1[df_1['Group'] == 'UCT'][column], df_1[df_1['Group'] == 'Control'][column], nan_policy='omit').pvalue
    
    if pvalue_cash <= 0.01: 
        means.at[column,'$\Delta$ UCT'] = means.at[column,'$\Delta$ UCT'] + '***'
    elif pvalue_cash <= 0.05: 
        means.at[column,'$\Delta$ UCT'] = means.at[column,'$\Delta$ UCT'] + '**'
    elif pvalue_cash <= 0.1: 
        means.at[column,'$\Delta$ UCT'] = means.at[column,'$\Delta$ UCT'] + '*'
    
    # as it is in the table, N is number of nonzero entries
    means.at[column, 'N'] = df_1[df_1[column] > 0][column].count()

# label the rows using "Better Var Name" in UPG-data/ssudan_survey.org,
# but without (last three days) or (last month) since variables are transformed (i.e. divided by 365 for yearly)
means.rename({'c_meat_b': ' Meat', 'c_fish_b': 'Fish', 
            'c_cereals_b': 'Cereals', 'c_sugar_b': 'Sugar', 
            'c_egg_b': 'Egg', 'c_oil_b': 'Oil', 
            'c_beans_b': 'Beans', 'c_fruit_b': 'Fruit', 
            'c_salt_b': 'Salt', 'c_vegetables_b': 'Vegetables', 
            'c_milk_b': 'Milk', 'c_spices_b': 'Spices', 
            'c_alcohol_b': 'Alcohol', 'c_otherfood_b': 'Other food', 
            'c_fuel_b': 'Cooking fuel', 'c_soap_b': 'Toiletries', 
            'c_transport_b': 'Transportation', 'c_cosmetics_b': 'Cosmetics', 
            'c_entertainment_b': 'Entertainment', 'c_clothesfootwear_b': 'Clothing, footwear', 
            'c_charities_b': 'Charities', 'c_ceremonies_b': 'Rituals/ceremonies', 
            'c_textiles_b': 'Textiles', 'c_utensils_b': 'Utensils',
            'c_dowry_b': 'Dowry', 'c_furniture_b': 'Furniture', 
            'c_other_b': 'Other non-food', 'asset_val_cows_b': 'Large livestock (cows)', 
            'asset_val_smallanimals_b': 'Small livestock', 'asset_val_bicycle_b': 'Bicycle', 
            'asset_val_radio_b': 'Radio', 'asset_val_motorcycle_b': 'Motorcycle', 
            'asset_val_net_b': 'Mosquito net', 'asset_val_poultry_b': 'Poultry', 
            'asset_val_bed_b': 'Bed', 'asset_val_chairtables_b': 'Chair/table', 
            'asset_val_mobile_b': 'Mobile phone', 'asset_val_netITN_b': 'Mosquito net ITN', 
            'asset_n_house_b': '# Houses', 'in_business_b': 'In business', 
            'child_total_b': '# Child', 'hh_size_b':'Household size'}, inplace=True)

newdf = df_to_orgtbl(means, float_fmt = '%.3f')
print(newdf)

df_1.boxplot(column = 'c_textiles_b', by = 'Group')
plt.savefig("textiles_Elliott.png")

df_1.boxplot(column = 'asset_val_motorcycle_b', by = 'Group')
plt.savefig("motorcycle_Elliott.png")

#+end_src


#+name: tab:balance_check
#+caption: Means of some analysis variables at baseline.  Asterisks indicate p<.1, .05, and .01 respectively
#+attr_latex: :environment longtable :align lrrrr
| Baseline Characteristics | Control | $\Delta$ UPG | $\Delta$ UCT | $N$ |
|--------------------------+---------+--------------+--------------+-----|
| Household size           |   7.232 |       -0.175 |          0.3 | 648 |
| # Child                  |   3.263 |        0.118 |        0.108 | 594 |
| In business              |   0.398 |        0.038 |        0.017 | 265 |
|--------------------------+---------+--------------+--------------+-----|
| Baseline Assets          |         |              |              |     |
|--------------------------+---------+--------------+--------------+-----|
| Furniture                |   0.196 |       -0.014 |        0.044 | 368 |
| Large livestock (cows)   |  253.31 |     -140.605 |      -99.681 |  35 |
| Small livestock          | 236.601 |      -86.069 |     -123.134 | 123 |
| Bicycle                  | 109.075 |      -12.554 |      -11.413 | 171 |
| Radio                    |  58.448 |       -5.969 |      -16.529 | 260 |
| Motorcycle               | 341.737 |      192.956 |    353.836** |  93 |
| Mosquito net             |  19.164 |        0.668 |        0.248 | 423 |
| Poultry                  |  42.402 |       -3.365 |       -8.894 | 161 |
| Bed                      |  241.27 |        7.992 |       32.762 | 521 |
| Chair/table              | 206.786 |      -29.368 |        3.617 | 531 |
| Mobile phone             |  97.537 |       12.627 |       -4.199 | 414 |
| Mosquito net ITN         |   7.822 |        1.215 |        1.178 | 181 |
| # Houses                 |   2.829 |         0.03 |        0.118 | 543 |
|--------------------------+---------+--------------+--------------+-----|
| Baseline Consumption     |         |              |              |     |
|--------------------------+---------+--------------+--------------+-----|
| Alcohol                  |   0.043 |        0.006 |       -0.029 |  18 |
| Beans                    |   0.696 |        0.231 |        0.226 | 192 |
| Rituals/ceremonies       |   0.132 |        0.007 |        0.026 | 152 |
| Charities                |    0.03 |       -0.006 |         -0.0 | 134 |
| Clothing, footwear       |   0.658 |       -0.026 |        0.033 | 595 |
| Cosmetics                |   0.682 |        0.027 |       -0.125 | 468 |
| Dowry                    |   1.256 |        -0.04 |        0.028 | 126 |
| Egg                      |   1.096 |       -0.091 |        0.038 | 276 |
| Entertainment            |   0.087 |       -0.024 |        -0.02 | 145 |
| Fish                     |   2.505 |       -0.154 |       -0.156 | 474 |
| Fruit                    |    0.69 |       -0.089 |          0.0 | 272 |
| Cooking fuel             |   0.762 |       -0.039 |       -0.072 | 456 |
| Meat                     |   4.205 |       -0.568 |       -0.052 | 378 |
| Milk                     |   1.284 |       -0.237 |       -0.232 | 114 |
| Oil                      |   1.364 |       -0.131 |       -0.141 | 613 |
| Salt                     |   0.447 |       -0.026 |        0.007 | 617 |
| Toiletries               |   0.483 |       -0.009 |       -0.026 | 536 |
| Spices                   |    0.23 |        0.024 |       -0.045 | 158 |
| Sugar                    |   1.713 |       -0.078 |       -0.189 | 604 |
| Textiles                 |   0.154 |       -0.005 |       0.055* | 376 |
| Transportation           |   0.176 |       -0.033 |        0.002 | 193 |
| Utensils                 |   0.246 |       -0.008 |        0.008 | 442 |
| Vegetables               |   1.543 |       -0.165 |        -0.18 | 471 |
| Cereals                  |   9.187 |       -0.947 |         0.27 | 605 |

*** Creating a new balance table with only nonzero values counting toward the mean :ignore:

To explore this, Table [[tab:mean_log_balance]] reports the means of log
expenditures, with expenditures of zero treated as missing data; thus
these figures are conditional on ownership.  We see from this table
that there are no significant differences between the control and
treatment groups; thus, rejections in the previous table can be
attributed to differences in rates of ownership.

# N represents the number of nonzero values, and only nonzero values
# are considered in calculations of the means

#+name: mean_log_balance
#+begin_src python :noweb no-export :exports none  :results output table raw labels=[] :colnames no
data_baseline  = "../../TUP-data/data/Baseline/UPG_baseline.dta"
data_assignment  = "../../UPG-report/documents/master_assignment.csv"
import pandas as pd
from scipy import stats
from cfe.df_utils import df_to_orgtbl
import matplotlib. pyplot as plt
import numpy as np

df_b = pd.read_stata(data_baseline)
df_a = pd.read_csv(data_assignment)

df = pd.merge(df_b, df_a[ ['RespID', 'Group'] ], how='inner', left_on="idno", right_on="RespID")


df_3_days = df[ ['c_meat_b', 'c_fish_b', 'c_cereals_b', 'c_sugar_b', 'c_egg_b', 'c_oil_b', 'c_beans_b', \
                    'c_fruit_b', 'c_salt_b', 'c_vegetables_b', \
                    'c_milk_b', 'c_spices_b', 'c_alcohol_b', 'c_otherfood_b'] ]

df_month = df[ ['c_fuel_b', 'c_soap_b', 'c_transport_b', 'c_cosmetics_b', 'c_entertainment_b'] ]

df_year = df[ ['c_clothesfootwear_b', 'c_charities_b', 'c_ceremonies_b', 'c_textiles_b', 'c_utensils_b',
                  'c_dowry_b', 'c_furniture_b', 'c_other_b'] ]

df_assets = df.get(['asset_val_cows_b', 'asset_val_smallanimals_b', 'asset_val_bicycle_b', 'asset_val_radio_b',
             'asset_val_motorcycle_b', 'asset_val_net_b', 'asset_val_poultry_b',
             'asset_val_bed_b', 'asset_val_chairtables_b', 'asset_val_mobile_b',
             'asset_val_netITN_b',
             'asset_n_house_b', 'child_total_b', 'hh_size_b'])

df_1 = df_3_days.join(df_month.join(df_year.join(df_assets)))

df_1.replace(to_replace = 0, value = float("NaN") , inplace = True)

# take the logs of expenditure for all variables except dummy variables
df_1 = df_1.transform(lambda x: np.log(x))

# add in group assignment and the dummy variables that need 0 as one of their values
df_1 = df_1.join(df[ [ 'in_business_b', 'Group'] ])

means = df_1.groupby(['Group']).mean()
means = means.T

means.insert(len(means.columns), '$\Delta$ UPG', means['UPG'] - means['Control'])
means.insert(len(means.columns), '$\Delta$ UCT', means['UCT'] - means['Control'])

d = {'Control': means['Control'], '$\Delta$ UPG': means['UPG'] - means['Control'], '$\Delta$ UCT': means['UCT'] - means['Control']}
means = pd.DataFrame(data=d)

# so we can add * later
means = means.round(decimals = 3)
means = means.astype(str)
means.insert(len(means.columns), 'N', 0)

column_list = ['c_meat_b', 'c_fish_b', 'c_cereals_b', 'c_sugar_b', 'c_egg_b', 'c_oil_b', 'c_beans_b', \
                    'c_fruit_b', 'c_salt_b', 'c_vegetables_b', \
                    'c_milk_b', 'c_spices_b', 'c_alcohol_b', 'c_otherfood_b', \
              'c_fuel_b', 'c_soap_b', 'c_transport_b', 'c_cosmetics_b', 'c_entertainment_b', \
               'c_clothesfootwear_b', 'c_charities_b', 'c_ceremonies_b', 'c_textiles_b', 'c_utensils_b',
                  'c_dowry_b', 'c_furniture_b', 'c_other_b', \
               'asset_val_cows_b', 'asset_val_smallanimals_b', 'asset_val_bicycle_b', 'asset_val_radio_b', \
             'asset_val_motorcycle_b', 'asset_val_net_b', 'asset_val_poultry_b', \
             'asset_val_bed_b', 'asset_val_chairtables_b', 'asset_val_mobile_b', \
             'asset_val_netITN_b', \
             'asset_n_house_b', 'in_business_b', 'child_total_b', 'hh_size_b']

# some are off by 0.001
for column in column_list:
    
    pvalue_tup = stats.ttest_ind(df_1[df_1['Group'] == 'UPG'][column], df_1[df_1['Group'] == 'Control'][column], nan_policy='omit').pvalue
    
    if pvalue_tup <= 0.01: 
        means.at[column,'$\Delta$ UPG'] = means.at[column,'$\Delta$ UPG'] + '***'
    elif pvalue_tup <= 0.05: 
        means.at[column,'$\Delta$ UPG'] = means.at[column,'$\Delta$ UPG'] + '**'
    elif pvalue_tup <= 0.1: 
        means.at[column,'$\Delta$ UPG'] = means.at[column,'$\Delta$ UPG'] + '*'
        
    pvalue_cash = stats.ttest_ind(df_1[df_1['Group'] == 'UCT'][column], df_1[df_1['Group'] == 'Control'][column], nan_policy='omit').pvalue
    
    if pvalue_cash <= 0.01: 
        means.at[column,'$\Delta$ UCT'] = means.at[column,'$\Delta$ UCT'] + '***'
    elif pvalue_cash <= 0.05: 
        means.at[column,'$\Delta$ UCT'] = means.at[column,'$\Delta$ UCT'] + '**'
    elif pvalue_cash <= 0.1: 
        means.at[column,'$\Delta$ UCT'] = means.at[column,'$\Delta$ UCT'] + '*'
    
   # N is number of nonzero entries
    means.at[column, 'N'] = df_1[column].count()

# label the rows using "Better Var Name" in UPG-data/ssudan_survey.org
means.rename({'c_meat_b': ' Meat (last three days)', 'c_fish_b': 'Fish (last three days)', 
            'c_cereals_b': 'Cereals (last three days)', 'c_sugar_b': 'Sugar (last three days)', 
            'c_egg_b': 'Egg (last three days)', 'c_oil_b': 'Oil (last three days)', 
            'c_beans_b': 'Beans (last three days)', 'c_fruit_b': 'Fruit (last three days)', 
            'c_salt_b': 'Salt (last three days)', 'c_vegetables_b': 'Vegetables (last three days)', 
            'c_milk_b': 'Milk (last three days)', 'c_spices_b': 'Spices (last three days)', 
            'c_alcohol_b': 'Alcohol (last three days)', 'c_otherfood_b': 'Other food (last three days)', 
            'c_fuel_b': 'Cooking fuel (last month)', 'c_soap_b': 'Toiletries (last month)', 
            'c_transport_b': 'Transportation (last month)', 'c_cosmetics_b': 'Cosmetics (last month)', 
            'c_entertainment_b': 'Entertainment (last month)', 'c_clothesfootwear_b': 'Clothing, footwear (last year)', 
            'c_charities_b': 'Charities (last year)', 'c_ceremonies_b': 'Rituals/ceremonies (last year)', 
            'c_textiles_b': 'Textiles (last year)', 'c_utensils_b': 'Utensils (last year)',
            'c_dowry_b': 'Dowry (last year)', 'c_furniture_b': 'Furniture (last year)', 
            'c_other_b': 'Other non-food (last year)', 'asset_val_cows_b': 'Large livestock (cows)', 
            'asset_val_smallanimals_b': 'Small livestock', 'asset_val_bicycle_b': 'Bicycle', 
            'asset_val_radio_b': 'Radio', 'asset_val_motorcycle_b': 'Motorcycle', 
            'asset_val_net_b': 'Mosquito net', 'asset_val_poultry_b': 'Poultry', 
            'asset_val_bed_b': 'Bed', 'asset_val_chairtables_b': 'Chair/table', 
            'asset_val_mobile_b': 'Mobile phone', 'asset_val_netITN_b': 'Mosquito net ITN', 
            'asset_n_house_b': '# Houses', 'in_business_b': 'In business', 
            'child_total_b': '# Child', 'hh_size_b':'Household size'}, inplace=True)

newdf = df_to_orgtbl(means, float_fmt = '%.3f')
print(newdf)

# box and whisker plots of log positive observations
df_1['c_textiles_b'] = df_1['c_textiles_b']
df_1.boxplot(column = 'c_textiles_b', by = 'Group')
plt.savefig("textiles_nonzero.png")

df_1['asset_val_mobile_b'] = df_1['asset_val_mobile_b']
df_1.boxplot(column = 'asset_val_mobile_b', by = 'Group')
plt.savefig("mobile_nonzero.png")

#+end_src

#+name: tab:mean_log_balance
#+caption: Means of logs of some analysis variables at baseline.  Asterisks indicate p<.1, .05, and .01 respectively.  Zeros are treated as missing.
#+attr_latex: :environment longtable :align lrrrr
| Variable                       | Control | $\Delta$ UPG | $\Delta$ UCT | $N$ |
|--------------------------------+---------+--------------+--------------+-----|
| Meat (last three days)         |   2.845 |        0.018 |        0.033 | 378 |
| Fish (last three days)         |   2.058 |        0.041 |       -0.022 | 474 |
| Cereals (last three days)      |   3.033 |       -0.071 |       -0.019 | 605 |
| Sugar (last three days)        |   1.346 |        -0.06 |       -0.031 | 604 |
| Egg (last three days)          |   1.811 |        0.011 |       -0.077 | 276 |
| Oil (last three days)          |   0.897 |        0.014 |       -0.035 | 613 |
| Beans (last three days)        |   1.669 |        0.135 |        0.127 | 192 |
| Fruit (last three days)        |   1.329 |        0.007 |        0.027 | 272 |
| Salt (last three days)         |   0.201 |       -0.054 |        0.001 | 617 |
| Vegetables (last three days)   |   1.532 |       -0.026 |       -0.047 | 471 |
| Milk (last three days)         |   2.514 |       -0.015 |       -0.217 | 114 |
| Spices (last three days)       |   0.858 |       -0.069 |        -0.21 | 158 |
| Alcohol (last three days)      |   1.304 |        0.104 |        0.305 |  18 |
| Cooking fuel (last month)      |   2.941 |        -0.01 |       -0.127 | 456 |
| Toiletries (last month)        |   2.328 |       -0.051 |       -0.172 | 536 |
| Transportation (last month)    |   2.395 |       -0.003 |        0.127 | 193 |
| Cosmetics (last month)         |   2.659 |        0.084 |       -0.054 | 468 |
| Entertainment (last month)     |   2.088 |        -0.13 |       -0.064 | 145 |
| Clothing, footwear (last year) |   4.989 |       -0.005 |       -0.074 | 595 |
| Charities (last year)          |   3.348 |       -0.229 |       -0.121 | 134 |
| Rituals/ceremonies (last year) |   4.422 |        0.261 |        0.162 | 152 |
| Textiles (last year)           |   4.096 |        0.052 |        0.112 | 376 |
| Utensils (last year)           |   4.352 |        -0.01 |       -0.003 | 442 |
| Dowry (last year)              |   5.934 |        0.433 |        0.178 | 126 |
| Furniture (last year)          |   4.224 |        0.033 |        0.185 | 368 |
| Large livestock (cows)         |   7.461 |       -0.072 |       -0.068 |  35 |
| Small livestock                |   6.425 |       -0.195 |       -0.364 | 123 |
| Bicycle                        |   5.601 |        0.051 |         0.14 | 171 |
| Radio                          |     4.3 |        0.067 |       -0.071 | 260 |
| Motorcycle                     |   6.762 |        0.676 |        0.778 |  93 |
| Mosquito net                   |   3.089 |        0.024 |       -0.008 | 423 |
| Poultry                        |   4.616 |        0.002 |       -0.177 | 161 |
| Bed                            |   5.306 |       -0.001 |        0.116 | 521 |
| Chair/table                    |   4.889 |        0.021 |        0.025 | 531 |
| Mobile phone                   |   4.811 |        0.119 |        0.031 | 414 |
| Mosquito net ITN               |   3.147 |       -0.047 |         0.13 | 181 |
| # Houses                       |   1.064 |       -0.027 |         -0.0 | 543 |
| # Child                        |   1.118 |        0.043 |        0.039 | 594 |
| Household size                 |   1.917 |       -0.021 |         0.05 | 648 |
| In business                    |   0.398 |        0.038 |        0.017 | 638 |

*** Box and whisker plots for the new balance table                  :ignore:noexport:

#+Caption: Box and whisker plot of log(positive textiles) for nonzero values
#+NAME: fig:box_whisker_textiles_nonzero
[[../documents/textiles_nonzero.png]]

#+Caption: Box and whisker plot of log(positive mobile) for nonzero values
#+NAME: fig:box_whisker_mobile_nonzero
[[../documents/mobile_nonzero.png]]


** Attrition & Selection
*** Discussion of attrition                                          :ignore:
Our census found 755 eligible households, and made efforts to
interview a respondent from every one of these households.  The degree
to which we succeeded is documented in \Tab{attrition_count}.
In the baseline survey we successfully interviewed
649 of these households; in the midline 606, and in the endline 700.

*** Recreating the attrition tables                         :ignore:
*************** NOTE
The results are slightly different (in the 2015 column) than in the original attrition
tables due to the creation of master_assignment.csv, which includes
everyone who was assigned to any group no matter whether they were
found at baseline, midline, or endline. It added 6 households which
were found only at endline and not accounted for in the original
attrition tables.
*************** END


# using master_assignment.csv
#+name: master_assignment_attrition 
#+begin_src python :exports none  :results output table raw labels=[] :colnames no :tangle master_assignment_attrition.py
data_baseline  = "../../TUP-data/data/Baseline/UPG_baseline.dta"
data_assignment  = "../../UPG-report/documents/master_assignment.csv"
data_midline = "../../TUP-data/Midline/UPG_midline.dta"
data_endline = "../../TUP-data/Endline/UPG_endline.dta"
import pandas as pd
import numpy as np
from cfe.df_utils import df_to_orgtbl

df_b = pd.read_stata(data_baseline) 
df_a = pd.read_csv(data_assignment)
df_m = pd.read_stata(data_midline)
df_e = pd.read_stata(data_endline)


print("""#+caption: Total number of households in sample by group and round.""")
# Initial assignment (from Census)
dassign = df_a.Group.value_counts(ascending=True)
# change "Cash" to "UCT"
dassign.rename(index={'Cash':'UCT'}, inplace=True)
dassign['All'] = dassign.sum()

# baseline (2013)
# merge baseline data id number and group column from master assignment csv based on respondent id/id number
df = pd.merge(df_b[ ['idno'] ], df_a[ ['RespID', 'Group'] ], how='inner', left_on="idno", right_on="RespID")

# change "Gift" to "Control"
df.replace(to_replace='Gift', value='Control', inplace=True)

# change "Cash" to "UCT"
df.replace(to_replace='Cash', value='UCT', inplace=True)

# count the number in each treatment group
bygroupdf = df.groupby(['Group']).count()
d2013 = {'UCT': bygroupdf.at['UCT','idno'],'Control': bygroupdf.at['Control','idno'],'UPG': bygroupdf.at['UPG','idno'],'All': df.Group.notna().sum()}

df_b = df

# midline (2014)
# merge midline data id number and group column from random assignment data based on respondent id/id number
df = pd.merge(df_m[ ['idno'] ], df_a[ ['RespID', 'Group'] ], how='inner', left_on="idno", right_on="RespID")

# change "Gift" to "Control"
df.replace(to_replace='Gift', value='Control', inplace=True)

# change "Cash" to "UCT"
df.replace(to_replace='Cash', value='UCT', inplace=True)

# count the number in each treatment group
bygroupdf = df.groupby(['Group']).count()
d2014 = {'UCT': bygroupdf.at['UCT','idno'],'Control': bygroupdf.at['Control','idno'],'UPG': bygroupdf.at['UPG','idno'],'All': df.Group.notna().sum()}

df_m = df

# endline (2015)
# merge endline data id number and group column from random assignment data based on respondent id/id number
df = pd.merge(df_e[ ['idno'] ], df_a[ ['RespID', 'Group'] ], how='inner', left_on="idno", right_on="RespID")

# change "Gift" to "Control"
df.replace(to_replace='Gift', value='Control', inplace=True)

# change "Cash" to "UCT"
df.replace(to_replace='Cash', value='UCT', inplace=True)

# count the number in each treatment group
bygroupdf = df.groupby(['Group']).count()
d2015 = {'UCT': bygroupdf.at['UCT','idno'],'Control': bygroupdf.at['Control','idno'],'UPG': bygroupdf.at['UPG','idno'],'All': df.Group.notna().sum()}

df_e = df

# make the table for total number of households in sample by group and round
d = {'Assigned': dassign, '2013': d2013, '2014': d2014, '2015': d2015}
table = pd.DataFrame(data = d) 

newdf = df_to_orgtbl(table, float_fmt = '%d')
print(newdf)


print("""#+caption: Number of households in sample with baseline survey by group and round""")


# find the intersection of people who had surveys at both baseline and midline
df_b_m = pd.merge(df_b[ ['idno'] ], df_m[ ['idno', 'Group'] ], how='inner', left_on="idno", right_on="idno")
bygroupdf_b_m = df_b_m.groupby(['Group']).count()

# find the intersection of people who had surveys at both baseline and endline
df_b_e = pd.merge(df_b[ ['idno'] ], df_e[ ['idno', 'Group'] ], how='inner', left_on="idno", right_on="idno")
bygroupdf_b_e = df_b_e.groupby(['Group']).count()

# count the number in each treatment group
dd2013 = d2013
dd2014 = {'UCT': bygroupdf_b_m.at['UCT','idno'],'Control': bygroupdf_b_m.at['Control','idno'],'UPG': bygroupdf_b_m.at['UPG','idno'],'All': df_b_m.Group.notna().sum()}
dd2015 = {'UCT': bygroupdf_b_e.at['UCT','idno'],'Control': bygroupdf_b_e.at['Control','idno'],'UPG': bygroupdf_b_e.at['UPG','idno'],'All': df_b_e.Group.notna().sum()}

# make the table for number of households in sample with baseline survey by group and round
dd = {'Assigned': dassign, '2013': dd2013, '2014': dd2014, '2015': dd2015}
table2 = pd.DataFrame(data = dd) 

newdf2 = df_to_orgtbl(table2, float_fmt = '%d')
print(newdf2)

#+end_src


#+name: tab:attrition_count
#+caption: Numbers of surveyed households, by group and round.  Parenthetical numbers are households surveyed conditional on also being surveyed at baseline.
|         | Assigned | 2013 | 2014      | 2015      |
|---------+----------+------+-----------+-----------|
| All     |      755 |  649 | 606 (554) | 700 (603) |
| Control |      380 |  281 | 265 (219) | 353 (262) |
| UPG     |      250 |  244 | 228 (223) | 236 (231) |
| UCT     |      125 |  124 | 113 (112) | 111 (110) |

*** Interview Probability Table                                      :ignore:
#+name: interview_probabilities
#+begin_src python :exports none  :results output table raw :dir ../ :colnames no :tangle selection_regression.py
import pandas as pd
import numpy as np
from cfe.df_utils import df_to_orgtbl
from cfe.estimation import ols

data_baseline  = "../TUP-data/data/Baseline/UPG_baseline.dta"
data_assignment  = "../UPG-report/documents/master_assignment.csv"
data_midline = "../TUP-data/Midline/UPG_midline.dta"
data_endline = "../TUP-data/Endline/UPG_endline.dta"

df_b = pd.read_stata(data_baseline) 
df_a = pd.read_csv(data_assignment)
df_m = pd.read_stata(data_midline)
df_e = pd.read_stata(data_endline)

DF = {}
# baseline (2013)
# merge baseline data id number and group column from master assignment csv based on respondent id/id number
df = pd.merge(df_b[ ['idno'] ], df_a[ ['RespID', 'Group'] ], how='inner', left_on="idno", right_on="RespID")

# change "Gift" to "Control"
df.replace(to_replace='Gift', value='Control', inplace=True)

# change "Cash" to "UCT"
df.replace(to_replace='Cash', value='UCT', inplace=True)

df.set_index('idno', inplace=True)

DF[2013] = df['Group']

# midline (2014)
# merge midline data id number and group column from random assignment data based on respondent id/id number
df = pd.merge(df_m[ ['idno'] ], df_a[ ['RespID', 'Group'] ], how='inner', left_on="idno", right_on="RespID")

# change "Gift" to "Control"
df.replace(to_replace='Gift', value='Control', inplace=True)

# change "Cash" to "UCT"
df.replace(to_replace='Cash', value='UCT', inplace=True)

df.set_index('idno', inplace=True)

DF[2014] = df['Group']

# endline (2015)
# merge endline data id number and group column from random assignment data based on respondent id/id number
df = pd.merge(df_e[ ['idno'] ], df_a[ ['RespID', 'Group'] ], how='inner', left_on="idno", right_on="RespID")

# change "Gift" to "Control"
df.replace(to_replace='Gift', value='Control', inplace=True)

# change "Cash" to "UCT"
df.replace(to_replace='Cash', value='UCT', inplace=True)

df.set_index('idno', inplace=True)

DF[2015] = df['Group']

df = (~pd.DataFrame(DF).isnull() + 0)
df.columns.name = 'Round'

df = df.stack()
df.name = 'Interviewed'

group = df_a.set_index('RespID')['Group']
group.index.name = 'idno'

df = pd.DataFrame(df).join(group,how='outer')

p = df.groupby(['Round','Group']).mean().unstack('Round')
p.columns = p.columns.droplevel(0)

print(df_to_orgtbl(p,float_fmt='\(%4.2f\)'))
#+end_src


#+name: tab:interview_probabilities
#+caption: Probability of completed interview, by round and treatment group.
| Group   | 2013     | 2014     | 2015     |
|---------+----------+----------+----------|
| Control | \(0.75\) | \(0.70\) | \(0.94\) |
| UPG     | \(0.98\) | \(0.92\) | \(0.95\) |
| UCT     | \(0.99\) | \(0.90\) | \(0.89\) |

*** Interview Probability Discussion                                 :ignore:

 One important question is whether there's /differential/ selection by
 treatment group.  Table [[tab:interview_probabilities]] shows the
 proportion of /assigned/ households actually interviewed by both round
 and group.  There are three things to note about this table.  The first
 is that at baseline and midline the proportion of households
 interviewed from the control group was significantly lower than for
 the UPG and UCT groups.  The second is that challenges in the field
 led to a lower probability of a successful interview at midline.  The
 third is that members of the UCT were slightly (but not
 significantly) less likely to be interviewed at endline. 

 The relatively low proportion of control households being interviewed
 in the first two rounds can be attributed to the fact that these
 households did not have the same consistent contact with BRAC that
 the UPG & UCT groups had, and this consistent contact was important
 for locating people in a rural area lacking certain infrastructure (phones,
 addresses) which might otherwise have made finding households
 easier, while the lower proportion of households interviewed at midline
 may be attributable to an early harvest that year.

 We explore this further, examining whether a random lack of balance in observable
 household characteristics at baseline is related to subsequent
 successful interviews.  \Tab{attrition_balance} reports the average level of
 various characteristics in 2013. Then we report the difference in means between
 households that were in and out of the midline or endline surveys.
 Note that the sample here consists not of all eligible households,
 but all households interviewed at baseline.  There is one important
 relationship that emerges: larger households & households with more
 children were more likely to be interviewed at midline. 

**** Recreating attrition balance table                            :ignore:
*************** NOTES
        - Elicitation for "Cereals" disaggregated after baseline, so not comparable.
*************** END

 #+name: attrition_balance
 #+begin_src python :noweb no-export :exports none  :results output table raw labels=[] :colnames no
data_baseline  = "../../TUP-data/data/Baseline/UPG_baseline.dta"
data_midline  = "/Users/beckycardinali/Desktop/TUP-data/Midline/UPG_midline.dta"
data_endline = "/Users/beckycardinali/Desktop/TUP-data/Endline/UPG_endline.dta"
data_assignment  = "../../UPG-report/documents/master_assignment.csv"
import pandas as pd
from scipy import stats
from cfe.df_utils import df_to_orgtbl

df_b = pd.read_stata(data_baseline)
df_m = pd.read_stata(data_midline)
df_e = pd.read_stata(data_endline)
df_a = pd.read_csv(data_assignment)

df_m.insert(len(df_m.columns), 'in_midline', 1)
df_e.insert(len(df_e.columns), 'in_endline', 1)

df = pd.merge(df_b, df_a[ ['RespID', 'Group'] ], how='outer', left_on="idno", right_on="RespID")

# merge in midline and endline
df = pd.merge(df, df_m[ ['idno', 'in_midline'] ], how='outer', left_on="idno", right_on="idno")
df = pd.merge(df, df_e[ ['idno', 'in_endline'] ], how='outer', left_on='idno', right_on='idno')

df['in_midline'].fillna(value=0, inplace=True)
df['in_endline'].fillna(value=0, inplace=True)

df_3_days = df[ ['c_meat_b', 'c_fish_b', 'c_cereals_b', 'c_sugar_b', 'c_egg_b', 'c_oil_b', 'c_beans_b', \
                    'c_fruit_b', 'c_salt_b', 'c_vegetables_b', \
                    'c_milk_b', 'c_spices_b', 'c_alcohol_b', 'c_otherfood_b'] ].transform(lambda x: x/3)

df_month = df[ ['c_fuel_b', 'c_soap_b', 'c_transport_b', 'c_cosmetics_b', 'c_entertainment_b'] ].transform(lambda x: x/30)

df_year = df[ ['c_clothesfootwear_b', 'c_charities_b', 'c_ceremonies_b', 'c_textiles_b', 'c_utensils_b',
                  'c_dowry_b', 'c_furniture_b', 'c_other_b'] ].transform(lambda x: x/365)

df_assets = df.get(['asset_val_cows_b', 'asset_val_smallanimals_b', 'asset_val_bicycle_b', 'asset_val_radio_b',
             'asset_val_motorcycle_b', 'asset_val_net_b', 'asset_val_poultry_b',
             'asset_val_bed_b', 'asset_val_chairtables_b', 'asset_val_mobile_b',
             'asset_val_netITN_b',
             'asset_n_house_b', 'in_business_b', 'child_total_b', 'hh_size_b',
             'Group', 'in_midline', 'in_endline'])

df_1 = df_3_days.join(df_month.join(df_year.join(df_assets)))

means_b = df_1.mean()
means_m = df_1.groupby(['in_midline']).mean()
means_e = df_1.groupby(['in_endline']).mean()
means_b = means_b.T
means_m = means_m.T
means_e = means_e.T

# some are off by 0.001, clothesfootwear numbers differ
d = {'mean_baseline': means_b, 'beta_mid': means_m[1.0] - means_m[0.0], 'beta_end': means_e[1.0] - means_e[0.0]}
means = pd.DataFrame(data=d)

#default axis=0 for dropping rows
means.drop(['in_midline', 'in_endline'], inplace=True)

# so we can add * later
means = means.round(decimals = 3)
means = means.astype(str)

column_list = ['c_meat_b', 'c_fish_b', 'c_cereals_b', 'c_sugar_b', 'c_egg_b', 'c_oil_b', 'c_beans_b', \
                    'c_fruit_b', 'c_salt_b', 'c_vegetables_b', \
                    'c_milk_b', 'c_spices_b', 'c_alcohol_b', 'c_otherfood_b', \
              'c_fuel_b', 'c_soap_b', 'c_transport_b', 'c_cosmetics_b', 'c_entertainment_b', \
               'c_clothesfootwear_b', 'c_charities_b', 'c_ceremonies_b', 'c_textiles_b', 'c_utensils_b',
                  'c_dowry_b', 'c_furniture_b', 'c_other_b', \
              'asset_val_cows_b', 'asset_val_smallanimals_b', 'asset_val_bicycle_b', 'asset_val_radio_b', \
             'asset_val_motorcycle_b', 'asset_val_net_b', 'asset_val_poultry_b', \
             'asset_val_bed_b', 'asset_val_chairtables_b', 'asset_val_mobile_b', \
             'asset_val_netITN_b', \
             'asset_n_house_b', 'in_business_b', 'child_total_b', 'hh_size_b']

for column in column_list:
    
    pvalue_mid = stats.ttest_ind(df_1[df_1['in_midline'] == 1][column], df_1[df_1['in_midline'] == 0][column], nan_policy='omit').pvalue
    
    if pvalue_mid <= 0.01: 
        means.at[column,'beta_mid'] = means.at[column,'beta_mid'] + '***'
    elif pvalue_mid <= 0.05: 
        means.at[column,'beta_mid'] = means.at[column,'beta_mid'] + '**'
    elif pvalue_mid <= 0.1: 
        means.at[column,'beta_mid'] = means.at[column,'beta_mid'] + '*'
        
    pvalue_end = stats.ttest_ind(df_1[df_1['in_endline'] == 1][column], df_1[df_1['in_endline'] == 0][column], nan_policy='omit').pvalue
    
    if pvalue_end <= 0.01: 
        means.at[column,'beta_end'] = means.at[column,'beta_end'] + '***'
    elif pvalue_end <= 0.05: 
        means.at[column,'beta_end'] = means.at[column,'beta_end'] + '**'
    elif pvalue_end <= 0.1: 
        means.at[column,'beta_end'] = means.at[column,'beta_end'] + '*'

# label the rows using "Better Var Name" in UPG-data/ssudan_survey.org,
# but without (last three days) or (last month) since variables are transformed (i.e. divided by 365 for yearly)
means.rename({'c_meat_b': ' Meat', 'c_fish_b': 'Fish', 
            'c_cereals_b': 'Cereals', 'c_sugar_b': 'Sugar', 
            'c_egg_b': 'Egg', 'c_oil_b': 'Oil', 
            'c_beans_b': 'Beans', 'c_fruit_b': 'Fruit', 
            'c_salt_b': 'Salt', 'c_vegetables_b': 'Vegetables', 
            'c_milk_b': 'Milk', 'c_spices_b': 'Spices', 
            'c_alcohol_b': 'Alcohol', 'c_otherfood_b': 'Other food', 
            'c_fuel_b': 'Cooking fuel', 'c_soap_b': 'Toiletries', 
            'c_transport_b': 'Transportation', 'c_cosmetics_b': 'Cosmetics', 
            'c_entertainment_b': 'Entertainment', 'c_clothesfootwear_b': 'Clothing, footwear', 
            'c_charities_b': 'Charities', 'c_ceremonies_b': 'Rituals/ceremonies', 
            'c_textiles_b': 'Textiles', 'c_utensils_b': 'Utensils',
            'c_dowry_b': 'Dowry', 'c_furniture_b': 'Furniture', 
            'c_other_b': 'Other non-food', 'asset_val_cows_b': 'Large livestock (cows)', 
            'asset_val_smallanimals_b': 'Small livestock', 'asset_val_bicycle_b': 'Bicycle', 
            'asset_val_radio_b': 'Radio', 'asset_val_motorcycle_b': 'Motorcycle', 
            'asset_val_net_b': 'Mosquito net', 'asset_val_poultry_b': 'Poultry', 
            'asset_val_bed_b': 'Bed', 'asset_val_chairtables_b': 'Chair/table', 
            'asset_val_mobile_b': 'Mobile phone', 'asset_val_netITN_b': 'Mosquito net ITN', 
            'asset_n_house_b': '# Houses', 'in_business_b': 'In business', 
            'child_total_b': '# Child', 'hh_size_b':'Household size'}, inplace=True)

newdf = df_to_orgtbl(means, float_fmt = '%.3f')
print(newdf)


 #+end_src


 #+caption: Means of household baseline characteristics and regression coefficients for whether they were ultimately found at baseline or endline. (Note that this does not consider households found only in 2014 or 2015).
 #+attr_latex: :environment longtable :align lrrrrr
 #+name: tab:attrition_balance
 |--------------------------+----------------------+----------------+----------------|
 | Baseline Characteristics | $\mbox{Mean}_{2013}$ | $\beta_{2014}$ | $\beta_{2015}$ |
 |--------------------------+----------------------+----------------+----------------|
 | Household size           |                7.224 |        0.595** |          0.428 |
 | # Children               |                3.328 |       0.656*** |          0.423 |
 | In business              |                0.415 |          0.038 |          0.007 |
 |--------------------------+----------------------+----------------+----------------|
 | Baseline Assets          |                      |                |                |
 |--------------------------+----------------------+----------------+----------------|
 | # Houses                 |                2.863 |          0.305 |          0.367 |
 | Bed                      |              250.535 |         12.649 |        -51.133 |
 | Bicycle                  |              102.174 |         11.179 |          4.212 |
 | Chair/table              |              196.436 |         -0.303 |        -37.177 |
 | Furniture                |                0.199 |         -0.023 |           0.02 |
 | Large livestock (cows)   |              181.402 |         67.862 |        -89.273 |
 | Mobile phone             |              101.482 |          6.336 |        -13.028 |
 | Motorcycle               |              481.886 |        213.002 |       -241.819 |
 | Mosquito net ITN         |                8.504 |         -1.777 |          0.449 |
 | Mosquito net             |               19.462 |          0.332 |          2.814 |
 | Poultry                  |               39.438 |        23.634* |         -2.243 |
 | Radio                    |               53.046 |         -6.333 |       -35.093* |
 | Small livestock          |              180.716 |         18.966 |        -79.014 |
 |--------------------------+----------------------+----------------+----------------|
 | Baseline Consumption     |                      |                |                |
 |--------------------------+----------------------+----------------+----------------|
 | Alcohol                  |                 0.04 |          0.005 |         -0.004 |
 | Beans                    |                0.826 |          0.269 |         -0.382 |
 | Rituals/ceremonies       |                0.139 |         -0.019 |         -0.038 |
 | Charities                |                0.027 |          0.007 |         -0.001 |
 | Clothing, footwear       |                0.655 |         0.177* |         -0.203 |
 | Cosmetics                |                0.668 |          0.005 |          0.229 |
 | Dowry                    |                1.247 |          0.745 |         -0.394 |
 | Egg                      |                1.069 |         -0.005 |          0.106 |
 | Entertainment            |                0.074 |          0.021 |         0.051* |
 | Fish                     |                2.418 |         -0.132 |          0.036 |
 | Fruit                    |                0.657 |          0.009 |         -0.151 |
 | Cooking fuel             |                0.733 |          0.105 |         -0.049 |
 | Meat                     |                3.982 |          0.254 |            0.3 |
 | Milk                     |                 1.15 |          0.283 |          0.239 |
 | Oil                      |                1.288 |          0.037 |        -0.532* |
 | Salt                     |                0.439 |       -0.14*** |         -0.043 |
 | Toiletries               |                0.475 |        -0.181* |          0.047 |
 | Spices                   |                0.231 |          0.024 |         -0.048 |
 | Sugar                    |                1.648 |         -0.285 |          -0.02 |
 | Textiles                 |                0.163 |           0.01 |          0.011 |
 | Transportation           |                0.164 |          0.004 |          0.018 |
 | Utensils                 |                0.245 |          0.061 |         -0.023 |
 | Vegetables               |                1.447 |          0.096 |         -0.151 |


**** Creating a new attrition balance table with only nonzero values counting toward the mean :noexport:

 The following table shows the means of log expenditures. 

 #+name: attrition_balance_nonzero
 #+begin_src python :noweb no-export :exports none  :results output table raw labels=[] :colnames no
data_baseline  = "../../TUP-data/data/Baseline/UPG_baseline.dta"
data_midline  = "../..//TUP-data/Midline/UPG_midline.dta"
data_endline = "../..//TUP-data/Endline/UPG_endline.dta"
data_assignment  = "../../Report/documents/master_assignment.csv"
import pandas as pd
import numpy as np
from scipy import stats
from cfe.df_utils import df_to_orgtbl

df_b = pd.read_stata(data_baseline)
df_m = pd.read_stata(data_midline)
df_e = pd.read_stata(data_endline)
df_a = pd.read_csv(data_assignment)

df_m.insert(len(df_m.columns), 'in_midline', 1)
df_e.insert(len(df_e.columns), 'in_endline', 1)

df = pd.merge(df_b, df_a[ ['RespID', 'Group'] ], how='outer', left_on="idno", right_on="RespID")

# merge in midline and endline
df = pd.merge(df, df_m[ ['idno', 'in_midline'] ], how='outer', left_on="idno", right_on="idno")
df = pd.merge(df, df_e[ ['idno', 'in_endline'] ], how='outer', left_on='idno', right_on='idno')

df['in_midline'].fillna(value=0, inplace=True)
df['in_endline'].fillna(value=0, inplace=True)

df_3_days = df[ ['c_meat_b', 'c_fish_b', 'c_cereals_b', 'c_sugar_b', 'c_egg_b', 'c_oil_b', 'c_beans_b', \
                    'c_fruit_b', 'c_salt_b', 'c_vegetables_b', \
                    'c_milk_b', 'c_spices_b', 'c_alcohol_b', 'c_otherfood_b'] ]

df_month = df[ ['c_fuel_b', 'c_soap_b', 'c_transport_b', 'c_cosmetics_b', 'c_entertainment_b'] ]

df_year = df[ ['c_clothesfootwear_b', 'c_charities_b', 'c_ceremonies_b', 'c_textiles_b', 'c_utensils_b',
                  'c_dowry_b', 'c_furniture_b', 'c_other_b'] ]

df_assets = df.get(['asset_val_cows_b', 'asset_val_smallanimals_b', 'asset_val_bicycle_b', 'asset_val_radio_b',
             'asset_val_motorcycle_b', 'asset_val_net_b', 'asset_val_poultry_b',
             'asset_val_bed_b', 'asset_val_chairtables_b', 'asset_val_mobile_b',
             'asset_val_netITN_b',
             'asset_n_house_b', 'child_total_b', 'hh_size_b'])

df_1 = df_3_days.join(df_month.join(df_year.join(df_assets)))
df_1.replace(to_replace = 0, value = float("NaN") , inplace = True)

# take the logs of expenditure for all variables except dummy variables
df_1 = df_1.transform(lambda x: np.log(x))

# add in group assignment and the dummy variables that need 0 as one of their values
df_1 = df_1.join(df[ ['in_midline', 'in_endline', 'in_business_b', 'Group'] ])

means_b = df_1.mean()
means_m = df_1.groupby(['in_midline']).mean()
means_e = df_1.groupby(['in_endline']).mean()
means_b = means_b.T
means_m = means_m.T
means_e = means_e.T

d = {'mean_baseline': means_b, 'beta_mid': means_m[1.0] - means_m[0.0], 'beta_end': means_e[1.0] - means_e[0.0]}
means = pd.DataFrame(data=d)

#default axis=0 for dropping rows
means.drop(['in_midline', 'in_endline'], inplace=True)

# so we can add * later
means = means.round(decimals = 3)
means = means.astype(str)

column_list = ['c_meat_b', 'c_fish_b', 'c_cereals_b', 'c_sugar_b', 'c_egg_b', 'c_oil_b', 'c_beans_b', \
                    'c_fruit_b', 'c_salt_b', 'c_vegetables_b', \
                    'c_milk_b', 'c_spices_b', 'c_alcohol_b', 'c_otherfood_b', \
              'c_fuel_b', 'c_soap_b', 'c_transport_b', 'c_cosmetics_b', 'c_entertainment_b', \
               'c_clothesfootwear_b', 'c_charities_b', 'c_ceremonies_b', 'c_textiles_b', 'c_utensils_b',
                  'c_dowry_b', 'c_furniture_b', 'c_other_b', \
              'asset_val_cows_b', 'asset_val_smallanimals_b', 'asset_val_bicycle_b', 'asset_val_radio_b', \
             'asset_val_motorcycle_b', 'asset_val_net_b', 'asset_val_poultry_b', \
             'asset_val_bed_b', 'asset_val_chairtables_b', 'asset_val_mobile_b', \
             'asset_val_netITN_b', \
             'asset_n_house_b', 'in_business_b', 'child_total_b', 'hh_size_b']

for column in column_list:
    
    pvalue_mid = stats.ttest_ind(df_1[df_1['in_midline'] == 1][column], df_1[df_1['in_midline'] == 0][column], nan_policy='omit').pvalue
    
    if pvalue_mid <= 0.01: 
        means.at[column,'beta_mid'] = means.at[column,'beta_mid'] + '***'
    elif pvalue_mid <= 0.05: 
        means.at[column,'beta_mid'] = means.at[column,'beta_mid'] + '**'
    elif pvalue_mid <= 0.1: 
        means.at[column,'beta_mid'] = means.at[column,'beta_mid'] + '*'
        
    pvalue_end = stats.ttest_ind(df_1[df_1['in_endline'] == 1][column], df_1[df_1['in_endline'] == 0][column], nan_policy='omit').pvalue
    
    if pvalue_end <= 0.01: 
        means.at[column,'beta_end'] = means.at[column,'beta_end'] + '***'
    elif pvalue_end <= 0.05: 
        means.at[column,'beta_end'] = means.at[column,'beta_end'] + '**'
    elif pvalue_end <= 0.1: 
        means.at[column,'beta_end'] = means.at[column,'beta_end'] + '*'

# label the rows using "Better Var Name" in UPG-data/ssudan_survey.org
means.rename({'c_meat_b': ' Meat (last three days)', 'c_fish_b': 'Fish (last three days)', 
            'c_cereals_b': 'Cereals (last three days)', 'c_sugar_b': 'Sugar (last three days)', 
            'c_egg_b': 'Egg (last three days)', 'c_oil_b': 'Oil (last three days)', 
            'c_beans_b': 'Beans (last three days)', 'c_fruit_b': 'Fruit (last three days)', 
            'c_salt_b': 'Salt (last three days)', 'c_vegetables_b': 'Vegetables (last three days)', 
            'c_milk_b': 'Milk (last three days)', 'c_spices_b': 'Spices (last three days)', 
            'c_alcohol_b': 'Alcohol (last three days)', 'c_otherfood_b': 'Other food (last three days)', 
            'c_fuel_b': 'Cooking fuel (last month)', 'c_soap_b': 'Toiletries (last month)', 
            'c_transport_b': 'Transportation (last month)', 'c_cosmetics_b': 'Cosmetics (last month)', 
            'c_entertainment_b': 'Entertainment (last month)', 'c_clothesfootwear_b': 'Clothing, footwear (last year)', 
            'c_charities_b': 'Charities (last year)', 'c_ceremonies_b': 'Rituals/ceremonies (last year)', 
            'c_textiles_b': 'Textiles (last year)', 'c_utensils_b': 'Utensils (last year)',
            'c_dowry_b': 'Dowry (last year)', 'c_furniture_b': 'Furniture (last year)', 
            'c_other_b': 'Other non-food (last year)', 'asset_val_cows_b': 'Large livestock (cows)', 
            'asset_val_smallanimals_b': 'Small livestock', 'asset_val_bicycle_b': 'Bicycle', 
            'asset_val_radio_b': 'Radio', 'asset_val_motorcycle_b': 'Motorcycle', 
            'asset_val_net_b': 'Mosquito net', 'asset_val_poultry_b': 'Poultry', 
            'asset_val_bed_b': 'Bed', 'asset_val_chairtables_b': 'Chair/table', 
            'asset_val_mobile_b': 'Mobile phone', 'asset_val_netITN_b': 'Mosquito net ITN', 
            'asset_n_house_b': '# Houses', 'in_business_b': 'In business', 
            'child_total_b': '# Child', 'hh_size_b':'Household size'}, inplace=True)

newdf = df_to_orgtbl(means, float_fmt = '%.3f')

print(newdf)


 #+end_src

 #+RESULTS: attrition_balance_nonzero
 |                                | mean_baseline |  beta_mid | beta_end |
 |--------------------------------+---------------+-----------+----------|
 | # Houses                       |         1.054 |     0.083 |    0.071 |
 | Bed                            |         5.328 |     0.028 | -0.408** |
 | Bicycle                        |         5.642 |     0.106 |    0.015 |
 | Chair/table                    |         4.902 |     0.179 |   -0.224 |
 | Large livestock (cows)         |         7.428 |     0.686 |    0.133 |
 | Mobile phone                   |         4.862 |     0.075 |   -0.174 |
 | Motorcycle                     |         7.223 |     0.918 |    0.787 |
 | Mosquito net ITN               |         3.151 |     0.034 |   -0.324 |
 | Mosquito net                   |         3.096 |     0.009 |    0.056 |
 | Poultry                        |         4.582 |     0.259 |    0.111 |
 | Radio                          |         4.314 |    -0.036 |   -0.354 |
 | Small livestock                |          6.29 |     0.351 |    0.081 |
 | Alcohol (last three days)      |         1.367 |    -0.272 |   0.633* |
 | Beans (last three days)        |         1.746 |      0.3* |   -0.272 |
 | Cereals (last three days)      |         3.003 |    -0.052 |  -0.255* |
 | Rituals/ceremonies (last year) |          4.54 |    -0.139 |   -0.085 |
 | Charities (last year)          |         3.237 |    -0.241 |    0.076 |
 | Clothing, footwear (last year) |         4.973 |    0.234* |   -0.169 |
 | Cosmetics (last month)         |          2.68 |     -0.03 |    0.062 |
 | Dowry (last year)              |         6.103 |     0.596 |    0.122 |
 | Egg (last three days)          |         1.797 |    -0.081 |    0.076 |
 | Entertainment (last month)     |         2.033 |    -0.116 |    0.418 |
 | Fish (last three days)         |         2.069 |       0.0 |    0.028 |
 | Fruit (last three days)        |         1.337 |     0.094 |   -0.114 |
 | Cooking fuel (last month)      |         2.912 |     0.033 |   -0.257 |
 | Furniture (last year)          |         4.273 |     0.041 |   -0.338 |
 | Meat (last three days)         |         2.859 |     0.133 |    0.105 |
 | Milk (last three days)         |         2.461 |     0.193 |    0.175 |
 | Oil (last three days)          |         0.896 |    -0.054 |   -0.216 |
 | Other non-food (last year)     |           nan |       nan |      nan |
 | Other food (last three days)   |           nan |       nan |      nan |
 | Salt (last three days)         |          0.18 | -0.154*** |   -0.053 |
 | Toiletries (last month)        |         2.276 |     -0.17 |   -0.086 |
 | Spices (last three days)       |         0.792 |     -0.19 |   -0.156 |
 | Sugar (last three days)        |         1.317 |    -0.092 |   -0.116 |
 | Textiles (last year)           |         4.137 |     0.099 |   -0.109 |
 | Transportation (last month)    |         2.417 |    -0.132 |    0.022 |
 | Utensils (last year)           |         4.347 |      0.21 |    -0.24 |
 | Vegetables (last three days)   |         1.514 |     0.095 |   -0.047 |
 | # Child                        |         1.142 |  0.219*** |   0.173* |
 | Household size                 |         1.919 |   0.081** |    0.062 |
 | In business                    |         0.415 |     0.038 |    0.007 |


